<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="841"><g><title>nn_from_scratch`nn_from_scratch::xor::build_neural_net (1 samples, 0.12%)</title><rect x="0.0000%" y="309" width="0.1189%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>nn_from_scratch`nn_lib::layer::DenseLayer::new (1 samples, 0.12%)</title><rect x="0.0000%" y="293" width="0.1189%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>nn_from_scratch`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_vec_unchecked (1 samples, 0.12%)</title><rect x="0.0000%" y="277" width="0.1189%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.12%)</title><rect x="0.1189%" y="277" width="0.1189%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.3689%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.12%)</title><rect x="0.2378%" y="277" width="0.1189%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.4878%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.12%)</title><rect x="0.3567%" y="245" width="0.1189%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="0.6067%" y="255.50"></text></g><g><title>nn_from_scratch`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.24%)</title><rect x="0.3567%" y="277" width="0.2378%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="2"/><text x="0.6067%" y="287.50"></text></g><g><title>nn_from_scratch`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.24%)</title><rect x="0.3567%" y="261" width="0.2378%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="2"/><text x="0.6067%" y="271.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::to_owned (1 samples, 0.12%)</title><rect x="0.4756%" y="245" width="0.1189%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="1"/><text x="0.7256%" y="255.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::is_contiguous (1 samples, 0.12%)</title><rect x="0.4756%" y="229" width="0.1189%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="1"/><text x="0.7256%" y="239.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::default_strides (1 samples, 0.12%)</title><rect x="0.4756%" y="213" width="0.1189%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="1"/><text x="0.7256%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::ndindex::_&lt;impl ndarray::dimension::conversion::IntoDimension for &amp;[usize]&gt;::into_dimension (1 samples, 0.12%)</title><rect x="0.4756%" y="197" width="0.1189%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="1"/><text x="0.7256%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (33 samples, 3.92%)</title><rect x="0.5945%" y="181" width="3.9239%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="33"/><text x="0.8445%" y="191.50">libs..</text></g><g><title>dyld`start (40 samples, 4.76%)</title><rect x="0.0000%" y="405" width="4.7562%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="40"/><text x="0.2500%" y="415.50">dyld`s..</text></g><g><title>nn_from_scratch`main (40 samples, 4.76%)</title><rect x="0.0000%" y="389" width="4.7562%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="40"/><text x="0.2500%" y="399.50">nn_fro..</text></g><g><title>nn_from_scratch`std::rt::lang_start_internal (40 samples, 4.76%)</title><rect x="0.0000%" y="373" width="4.7562%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="40"/><text x="0.2500%" y="383.50">nn_fro..</text></g><g><title>nn_from_scratch`std::rt::lang_start::_{{closure}} (40 samples, 4.76%)</title><rect x="0.0000%" y="357" width="4.7562%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="40"/><text x="0.2500%" y="367.50">nn_fro..</text></g><g><title>nn_from_scratch`std::sys_common::backtrace::__rust_begin_short_backtrace (40 samples, 4.76%)</title><rect x="0.0000%" y="341" width="4.7562%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="40"/><text x="0.2500%" y="351.50">nn_fro..</text></g><g><title>nn_from_scratch`nn_from_scratch::main (40 samples, 4.76%)</title><rect x="0.0000%" y="325" width="4.7562%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="40"/><text x="0.2500%" y="335.50">nn_fro..</text></g><g><title>nn_from_scratch`nn_from_scratch::xor::start (39 samples, 4.64%)</title><rect x="0.1189%" y="309" width="4.6373%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="39"/><text x="0.3689%" y="319.50">nn_fr..</text></g><g><title>nn_from_scratch`nn_lib::neural_network::NeuralNetwork::train (39 samples, 4.64%)</title><rect x="0.1189%" y="293" width="4.6373%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="39"/><text x="0.3689%" y="303.50">nn_fr..</text></g><g><title>nn_from_scratch`nn_lib::neural_network::NeuralNetwork::process_batch (35 samples, 4.16%)</title><rect x="0.5945%" y="277" width="4.1617%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="35"/><text x="0.8445%" y="287.50">nn_fr..</text></g><g><title>nn_from_scratch`&lt;&lt;rayon::iter::zip::Zip&lt;A,B&gt; as rayon::iter::IndexedParallelIterator&gt;::with_producer::CallbackA&lt;CB,B&gt; as rayon::iter::plumbing::ProducerCallback&lt;ITEM&gt;&gt;::callback (35 samples, 4.16%)</title><rect x="0.5945%" y="261" width="4.1617%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="35"/><text x="0.8445%" y="271.50">nn_fr..</text></g><g><title>nn_from_scratch`rayon::iter::plumbing::bridge_producer_consumer::helper (35 samples, 4.16%)</title><rect x="0.5945%" y="245" width="4.1617%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="35"/><text x="0.8445%" y="255.50">nn_fr..</text></g><g><title>nn_from_scratch`rayon_core::registry::Registry::in_worker_cold (35 samples, 4.16%)</title><rect x="0.5945%" y="229" width="4.1617%" height="15" fill="rgb(241,131,45)" fg:x="5" fg:w="35"/><text x="0.8445%" y="239.50">nn_fr..</text></g><g><title>nn_from_scratch`rayon_core::latch::LockLatch::wait_and_reset (35 samples, 4.16%)</title><rect x="0.5945%" y="213" width="4.1617%" height="15" fill="rgb(249,31,29)" fg:x="5" fg:w="35"/><text x="0.8445%" y="223.50">nn_fr..</text></g><g><title>nn_from_scratch`std::sync::condvar::Condvar::wait (35 samples, 4.16%)</title><rect x="0.5945%" y="197" width="4.1617%" height="15" fill="rgb(225,111,53)" fg:x="5" fg:w="35"/><text x="0.8445%" y="207.50">nn_fr..</text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (2 samples, 0.24%)</title><rect x="4.5184%" y="181" width="0.2378%" height="15" fill="rgb(238,160,17)" fg:x="38" fg:w="2"/><text x="4.7684%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (2 samples, 0.24%)</title><rect x="4.5184%" y="165" width="0.2378%" height="15" fill="rgb(214,148,48)" fg:x="38" fg:w="2"/><text x="4.7684%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.12%)</title><rect x="4.7562%" y="405" width="0.1189%" height="15" fill="rgb(232,36,49)" fg:x="40" fg:w="1"/><text x="5.0062%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (562 samples, 66.83%)</title><rect x="4.8751%" y="293" width="66.8252%" height="15" fill="rgb(209,103,24)" fg:x="41" fg:w="562"/><text x="5.1251%" y="303.50">libsystem_kernel.dylib`swtch_pri</text></g><g><title>libsystem_kernel.dylib`__psynch_cvbroad (16 samples, 1.90%)</title><rect x="71.7004%" y="277" width="1.9025%" height="15" fill="rgb(229,88,8)" fg:x="603" fg:w="16"/><text x="71.9504%" y="287.50">l..</text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.12%)</title><rect x="73.7218%" y="245" width="0.1189%" height="15" fill="rgb(213,181,19)" fg:x="620" fg:w="1"/><text x="73.9718%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.12%)</title><rect x="73.8407%" y="229" width="0.1189%" height="15" fill="rgb(254,191,54)" fg:x="621" fg:w="1"/><text x="74.0907%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (8 samples, 0.95%)</title><rect x="73.9596%" y="229" width="0.9512%" height="15" fill="rgb(241,83,37)" fg:x="622" fg:w="8"/><text x="74.2096%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (8 samples, 0.95%)</title><rect x="73.9596%" y="213" width="0.9512%" height="15" fill="rgb(233,36,39)" fg:x="622" fg:w="8"/><text x="74.2096%" y="223.50"></text></g><g><title>nn_from_scratch`&lt;nn_lib::layer::ActivationLayer as nn_lib::layer::Layer&gt;::propagate_backward (1 samples, 0.12%)</title><rect x="74.9108%" y="229" width="0.1189%" height="15" fill="rgb(226,3,54)" fg:x="630" fg:w="1"/><text x="75.1608%" y="239.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (1 samples, 0.12%)</title><rect x="74.9108%" y="213" width="0.1189%" height="15" fill="rgb(245,192,40)" fg:x="630" fg:w="1"/><text x="75.1608%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.12%)</title><rect x="75.1486%" y="213" width="0.1189%" height="15" fill="rgb(238,167,29)" fg:x="632" fg:w="1"/><text x="75.3986%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.12%)</title><rect x="75.2675%" y="213" width="0.1189%" height="15" fill="rgb(232,182,51)" fg:x="633" fg:w="1"/><text x="75.5175%" y="223.50"></text></g><g><title>nn_from_scratch`__rdl_alloc (1 samples, 0.12%)</title><rect x="75.3864%" y="165" width="0.1189%" height="15" fill="rgb(231,60,39)" fg:x="634" fg:w="1"/><text x="75.6364%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.12%)</title><rect x="75.5054%" y="149" width="0.1189%" height="15" fill="rgb(208,69,12)" fg:x="635" fg:w="1"/><text x="75.7554%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.12%)</title><rect x="75.7432%" y="85" width="0.1189%" height="15" fill="rgb(235,93,37)" fg:x="637" fg:w="1"/><text x="75.9932%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.12%)</title><rect x="75.8621%" y="69" width="0.1189%" height="15" fill="rgb(213,116,39)" fg:x="638" fg:w="1"/><text x="76.1121%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (4 samples, 0.48%)</title><rect x="75.6243%" y="117" width="0.4756%" height="15" fill="rgb(222,207,29)" fg:x="636" fg:w="4"/><text x="75.8743%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_memalign (4 samples, 0.48%)</title><rect x="75.6243%" y="101" width="0.4756%" height="15" fill="rgb(206,96,30)" fg:x="636" fg:w="4"/><text x="75.8743%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.24%)</title><rect x="75.8621%" y="85" width="0.2378%" height="15" fill="rgb(218,138,4)" fg:x="638" fg:w="2"/><text x="76.1121%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.12%)</title><rect x="75.9810%" y="69" width="0.1189%" height="15" fill="rgb(250,191,14)" fg:x="639" fg:w="1"/><text x="76.2310%" y="79.50"></text></g><g><title>nn_from_scratch`__rdl_alloc (5 samples, 0.59%)</title><rect x="75.6243%" y="149" width="0.5945%" height="15" fill="rgb(239,60,40)" fg:x="636" fg:w="5"/><text x="75.8743%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_posix_memalign (5 samples, 0.59%)</title><rect x="75.6243%" y="133" width="0.5945%" height="15" fill="rgb(206,27,48)" fg:x="636" fg:w="5"/><text x="75.8743%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_memalign (1 samples, 0.12%)</title><rect x="76.0999%" y="117" width="0.1189%" height="15" fill="rgb(225,35,8)" fg:x="640" fg:w="1"/><text x="76.3499%" y="127.50"></text></g><g><title>nn_from_scratch`&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize (10 samples, 1.19%)</title><rect x="75.3864%" y="213" width="1.1891%" height="15" fill="rgb(250,213,24)" fg:x="634" fg:w="10"/><text x="75.6364%" y="223.50"></text></g><g><title> 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize (10 samples, 1.19%)</title><rect x="75.3864%" y="197" width="1.1891%" height="15" fill="rgb(247,123,22)" fg:x="634" fg:w="10"/><text x="75.6364%" y="207.50"></text></g><g><title> 2]&gt;&gt;&gt;&gt;::dot (10 samples, 1.19%)</title><rect x="75.3864%" y="181" width="1.1891%" height="15" fill="rgb(231,138,38)" fg:x="634" fg:w="10"/><text x="75.6364%" y="191.50"></text></g><g><title>nn_from_scratch`matrixmultiply::gemm::gemm_loop (9 samples, 1.07%)</title><rect x="75.5054%" y="165" width="1.0702%" height="15" fill="rgb(231,145,46)" fg:x="635" fg:w="9"/><text x="75.7554%" y="175.50"></text></g><g><title>nn_from_scratch`core::ops::function::impls::_&lt;impl core::ops::function::Fn&lt;A&gt; for &amp;F&gt;::call (3 samples, 0.36%)</title><rect x="76.2188%" y="149" width="0.3567%" height="15" fill="rgb(251,118,11)" fg:x="641" fg:w="3"/><text x="76.4688%" y="159.50"></text></g><g><title>nn_from_scratch`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (2 samples, 0.24%)</title><rect x="76.3377%" y="133" width="0.2378%" height="15" fill="rgb(217,147,25)" fg:x="642" fg:w="2"/><text x="76.5877%" y="143.50"></text></g><g><title>nn_from_scratch`core::ops::function::impls::_&lt;impl core::ops::function::Fn&lt;A&gt; for &amp;F&gt;::call (1 samples, 0.12%)</title><rect x="76.4566%" y="117" width="0.1189%" height="15" fill="rgb(247,81,37)" fg:x="643" fg:w="1"/><text x="76.7066%" y="127.50"></text></g><g><title>nn_from_scratch`&lt;nn_lib::layer::DenseLayer as nn_lib::layer::Layer&gt;::propagate_backward (14 samples, 1.66%)</title><rect x="75.0297%" y="229" width="1.6647%" height="15" fill="rgb(209,12,38)" fg:x="631" fg:w="14"/><text x="75.2797%" y="239.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::into_shape (1 samples, 0.12%)</title><rect x="76.5755%" y="213" width="0.1189%" height="15" fill="rgb(227,1,9)" fg:x="644" fg:w="1"/><text x="76.8255%" y="223.50"></text></g><g><title>nn_from_scratch`&lt;nn_lib::layer::DenseLayer as nn_lib::layer::Trainable&gt;::get_gradients (1 samples, 0.12%)</title><rect x="76.6944%" y="213" width="0.1189%" height="15" fill="rgb(248,47,43)" fg:x="645" fg:w="1"/><text x="76.9444%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.12%)</title><rect x="76.6944%" y="197" width="0.1189%" height="15" fill="rgb(221,10,30)" fg:x="645" fg:w="1"/><text x="76.9444%" y="207.50"></text></g><g><title>nn_from_scratch`__rdl_alloc (1 samples, 0.12%)</title><rect x="76.8133%" y="213" width="0.1189%" height="15" fill="rgb(210,229,1)" fg:x="646" fg:w="1"/><text x="77.0633%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::is_contiguous (2 samples, 0.24%)</title><rect x="76.9322%" y="197" width="0.2378%" height="15" fill="rgb(222,148,37)" fg:x="647" fg:w="2"/><text x="77.1822%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::default_strides (1 samples, 0.12%)</title><rect x="77.0511%" y="181" width="0.1189%" height="15" fill="rgb(234,67,33)" fg:x="648" fg:w="1"/><text x="77.3011%" y="191.50"></text></g><g><title>nn_from_scratch`&lt;nn_lib::optimizer::GradientDescent as nn_lib::optimizer::Optimizer&gt;::step (5 samples, 0.59%)</title><rect x="76.6944%" y="229" width="0.5945%" height="15" fill="rgb(247,98,35)" fg:x="645" fg:w="5"/><text x="76.9444%" y="239.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (3 samples, 0.36%)</title><rect x="76.9322%" y="213" width="0.3567%" height="15" fill="rgb(247,138,52)" fg:x="647" fg:w="3"/><text x="77.1822%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::zip::Zip&lt;(P1,),D&gt;::and (1 samples, 0.12%)</title><rect x="77.1700%" y="197" width="0.1189%" height="15" fill="rgb(213,79,30)" fg:x="649" fg:w="1"/><text x="77.4200%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.12%)</title><rect x="77.2889%" y="213" width="0.1189%" height="15" fill="rgb(246,177,23)" fg:x="650" fg:w="1"/><text x="77.5389%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::to_owned (2 samples, 0.24%)</title><rect x="77.2889%" y="229" width="0.2378%" height="15" fill="rgb(230,62,27)" fg:x="650" fg:w="2"/><text x="77.5389%" y="239.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::is_contiguous (1 samples, 0.12%)</title><rect x="77.4078%" y="213" width="0.1189%" height="15" fill="rgb(216,154,8)" fg:x="651" fg:w="1"/><text x="77.6578%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::default_strides (1 samples, 0.12%)</title><rect x="77.4078%" y="197" width="0.1189%" height="15" fill="rgb(244,35,45)" fg:x="651" fg:w="1"/><text x="77.6578%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::broadcast_with (1 samples, 0.12%)</title><rect x="77.5268%" y="213" width="0.1189%" height="15" fill="rgb(251,115,12)" fg:x="652" fg:w="1"/><text x="77.7768%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::broadcast::co_broadcast (1 samples, 0.12%)</title><rect x="77.5268%" y="197" width="0.1189%" height="15" fill="rgb(240,54,50)" fg:x="652" fg:w="1"/><text x="77.7768%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (2 samples, 0.24%)</title><rect x="77.5268%" y="229" width="0.2378%" height="15" fill="rgb(233,84,52)" fg:x="652" fg:w="2"/><text x="77.7768%" y="239.50"></text></g><g><title>nn_from_scratch`ndarray::zip::Zip&lt;(P,),D&gt;::from (1 samples, 0.12%)</title><rect x="77.6457%" y="213" width="0.1189%" height="15" fill="rgb(207,117,47)" fg:x="653" fg:w="1"/><text x="77.8957%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::zip::array_layout (1 samples, 0.12%)</title><rect x="77.6457%" y="197" width="0.1189%" height="15" fill="rgb(249,43,39)" fg:x="653" fg:w="1"/><text x="77.8957%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::is_contiguous (1 samples, 0.12%)</title><rect x="77.7646%" y="213" width="0.1189%" height="15" fill="rgb(209,38,44)" fg:x="654" fg:w="1"/><text x="78.0146%" y="223.50"></text></g><g><title>nn_from_scratch`DYLD-STUB$$memcmp (1 samples, 0.12%)</title><rect x="77.8835%" y="197" width="0.1189%" height="15" fill="rgb(236,212,23)" fg:x="655" fg:w="1"/><text x="78.1335%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::build_uninit (1 samples, 0.12%)</title><rect x="78.0024%" y="181" width="0.1189%" height="15" fill="rgb(242,79,21)" fg:x="656" fg:w="1"/><text x="78.2524%" y="191.50"></text></g><g><title>nn_from_scratch`ndarray::zip::Zip&lt;(P1,P2,PLast),D&gt;::collect_with_partial (1 samples, 0.12%)</title><rect x="78.0024%" y="165" width="0.1189%" height="15" fill="rgb(211,96,35)" fg:x="656" fg:w="1"/><text x="78.2524%" y="175.50"></text></g><g><title>nn_from_scratch`ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Mul&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (3 samples, 0.36%)</title><rect x="77.8835%" y="213" width="0.3567%" height="15" fill="rgb(253,215,40)" fg:x="655" fg:w="3"/><text x="78.1335%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::zip::Zip&lt;(P1,P2),D&gt;::map_collect_owned (2 samples, 0.24%)</title><rect x="78.0024%" y="197" width="0.2378%" height="15" fill="rgb(211,81,21)" fg:x="656" fg:w="2"/><text x="78.2524%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::uninit (1 samples, 0.12%)</title><rect x="78.1213%" y="181" width="0.1189%" height="15" fill="rgb(208,190,38)" fg:x="657" fg:w="1"/><text x="78.3713%" y="191.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::broadcast_with (1 samples, 0.12%)</title><rect x="78.2402%" y="197" width="0.1189%" height="15" fill="rgb(235,213,38)" fg:x="658" fg:w="1"/><text x="78.4902%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::broadcast::co_broadcast (1 samples, 0.12%)</title><rect x="78.2402%" y="181" width="0.1189%" height="15" fill="rgb(237,122,38)" fg:x="658" fg:w="1"/><text x="78.4902%" y="191.50"></text></g><g><title>nn_from_scratch`nn_lib::cost::CostFunction::cost (6 samples, 0.71%)</title><rect x="77.7646%" y="229" width="0.7134%" height="15" fill="rgb(244,218,35)" fg:x="654" fg:w="6"/><text x="78.0146%" y="239.50"></text></g><g><title>nn_from_scratch`ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Mul&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (2 samples, 0.24%)</title><rect x="78.2402%" y="213" width="0.2378%" height="15" fill="rgb(240,68,47)" fg:x="658" fg:w="2"/><text x="78.4902%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::zip::Zip&lt;(P1,P2),D&gt;::map_collect_owned (1 samples, 0.12%)</title><rect x="78.3591%" y="197" width="0.1189%" height="15" fill="rgb(210,16,53)" fg:x="659" fg:w="1"/><text x="78.6091%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::build_uninit (1 samples, 0.12%)</title><rect x="78.3591%" y="181" width="0.1189%" height="15" fill="rgb(235,124,12)" fg:x="659" fg:w="1"/><text x="78.6091%" y="191.50"></text></g><g><title>nn_from_scratch`ndarray::zip::Zip&lt;(P1,P2),D&gt;::and (1 samples, 0.12%)</title><rect x="78.3591%" y="165" width="0.1189%" height="15" fill="rgb(224,169,11)" fg:x="659" fg:w="1"/><text x="78.6091%" y="175.50"></text></g><g><title>nn_from_scratch`ndarray::zip::array_layout (1 samples, 0.12%)</title><rect x="78.3591%" y="149" width="0.1189%" height="15" fill="rgb(250,166,2)" fg:x="659" fg:w="1"/><text x="78.6091%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.12%)</title><rect x="78.5969%" y="213" width="0.1189%" height="15" fill="rgb(242,216,29)" fg:x="661" fg:w="1"/><text x="78.8469%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (16 samples, 1.90%)</title><rect x="78.7158%" y="213" width="1.9025%" height="15" fill="rgb(230,116,27)" fg:x="662" fg:w="16"/><text x="78.9658%" y="223.50">l..</text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (15 samples, 1.78%)</title><rect x="78.8347%" y="197" width="1.7836%" height="15" fill="rgb(228,99,48)" fg:x="663" fg:w="15"/><text x="79.0847%" y="207.50">l..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (7 samples, 0.83%)</title><rect x="80.6183%" y="213" width="0.8323%" height="15" fill="rgb(253,11,6)" fg:x="678" fg:w="7"/><text x="80.8683%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (7 samples, 0.83%)</title><rect x="80.6183%" y="197" width="0.8323%" height="15" fill="rgb(247,143,39)" fg:x="678" fg:w="7"/><text x="80.8683%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.12%)</title><rect x="81.4507%" y="197" width="0.1189%" height="15" fill="rgb(236,97,10)" fg:x="685" fg:w="1"/><text x="81.7007%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (2 samples, 0.24%)</title><rect x="81.5696%" y="197" width="0.2378%" height="15" fill="rgb(233,208,19)" fg:x="686" fg:w="2"/><text x="81.8196%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::is_contiguous (2 samples, 0.24%)</title><rect x="81.5696%" y="181" width="0.2378%" height="15" fill="rgb(216,164,2)" fg:x="686" fg:w="2"/><text x="81.8196%" y="191.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::default_strides (2 samples, 0.24%)</title><rect x="81.5696%" y="165" width="0.2378%" height="15" fill="rgb(220,129,5)" fg:x="686" fg:w="2"/><text x="81.8196%" y="175.50"></text></g><g><title>nn_from_scratch`&lt;nn_lib::layer::ActivationLayer as nn_lib::layer::Layer&gt;::feed_forward (4 samples, 0.48%)</title><rect x="81.4507%" y="213" width="0.4756%" height="15" fill="rgb(242,17,10)" fg:x="685" fg:w="4"/><text x="81.7007%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::shape_builder::Strides&lt;D&gt;::strides_for_dim (1 samples, 0.12%)</title><rect x="81.8074%" y="197" width="0.1189%" height="15" fill="rgb(242,107,0)" fg:x="688" fg:w="1"/><text x="82.0574%" y="207.50"></text></g><g><title>nn_from_scratch`&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize (1 samples, 0.12%)</title><rect x="82.0452%" y="197" width="0.1189%" height="15" fill="rgb(251,28,31)" fg:x="690" fg:w="1"/><text x="82.2952%" y="207.50"></text></g><g><title> 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize (1 samples, 0.12%)</title><rect x="82.0452%" y="181" width="0.1189%" height="15" fill="rgb(233,223,10)" fg:x="690" fg:w="1"/><text x="82.2952%" y="191.50"></text></g><g><title> 2]&gt;&gt;&gt;&gt;::dot (1 samples, 0.12%)</title><rect x="82.0452%" y="165" width="0.1189%" height="15" fill="rgb(215,21,27)" fg:x="690" fg:w="1"/><text x="82.2952%" y="175.50"></text></g><g><title>nn_from_scratch`matrixmultiply::gemm::gemm_loop (1 samples, 0.12%)</title><rect x="82.0452%" y="149" width="0.1189%" height="15" fill="rgb(232,23,21)" fg:x="690" fg:w="1"/><text x="82.2952%" y="159.50"></text></g><g><title>nn_from_scratch`core::ops::function::impls::_&lt;impl core::ops::function::Fn&lt;A&gt; for &amp;F&gt;::call (1 samples, 0.12%)</title><rect x="82.0452%" y="133" width="0.1189%" height="15" fill="rgb(244,5,23)" fg:x="690" fg:w="1"/><text x="82.2952%" y="143.50"></text></g><g><title>nn_from_scratch`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (1 samples, 0.12%)</title><rect x="82.0452%" y="117" width="0.1189%" height="15" fill="rgb(226,81,46)" fg:x="690" fg:w="1"/><text x="82.2952%" y="127.50"></text></g><g><title>nn_from_scratch`rayon::iter::plumbing::bridge_producer_consumer::helper (74 samples, 8.80%)</title><rect x="73.6029%" y="277" width="8.7990%" height="15" fill="rgb(247,70,30)" fg:x="619" fg:w="74"/><text x="73.8529%" y="287.50">nn_from_scra..</text></g><g><title>nn_from_scratch`rayon::iter::plumbing::Folder::consume_iter (74 samples, 8.80%)</title><rect x="73.6029%" y="261" width="8.7990%" height="15" fill="rgb(212,68,19)" fg:x="619" fg:w="74"/><text x="73.8529%" y="271.50">nn_from_scra..</text></g><g><title>nn_from_scratch`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (72 samples, 8.56%)</title><rect x="73.8407%" y="245" width="8.5612%" height="15" fill="rgb(240,187,13)" fg:x="621" fg:w="72"/><text x="74.0907%" y="255.50">nn_from_scra..</text></g><g><title>nn_from_scratch`nn_lib::neural_network::NeuralNetwork::predict (33 samples, 3.92%)</title><rect x="78.4780%" y="229" width="3.9239%" height="15" fill="rgb(223,113,26)" fg:x="660" fg:w="33"/><text x="78.7280%" y="239.50">nn_f..</text></g><g><title>nn_from_scratch`&lt;nn_lib::layer::DenseLayer as nn_lib::layer::Layer&gt;::feed_forward (4 samples, 0.48%)</title><rect x="81.9263%" y="213" width="0.4756%" height="15" fill="rgb(206,192,2)" fg:x="689" fg:w="4"/><text x="82.1763%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (2 samples, 0.24%)</title><rect x="82.1641%" y="197" width="0.2378%" height="15" fill="rgb(241,108,4)" fg:x="691" fg:w="2"/><text x="82.4141%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (2 samples, 0.24%)</title><rect x="82.1641%" y="181" width="0.2378%" height="15" fill="rgb(247,173,49)" fg:x="691" fg:w="2"/><text x="82.4141%" y="191.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::is_contiguous (2 samples, 0.24%)</title><rect x="82.1641%" y="165" width="0.2378%" height="15" fill="rgb(224,114,35)" fg:x="691" fg:w="2"/><text x="82.4141%" y="175.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::default_strides (1 samples, 0.12%)</title><rect x="82.2830%" y="149" width="0.1189%" height="15" fill="rgb(245,159,27)" fg:x="692" fg:w="1"/><text x="82.5330%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.12%)</title><rect x="82.5208%" y="229" width="0.1189%" height="15" fill="rgb(245,172,44)" fg:x="694" fg:w="1"/><text x="82.7708%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.24%)</title><rect x="82.6397%" y="213" width="0.2378%" height="15" fill="rgb(236,23,11)" fg:x="695" fg:w="2"/><text x="82.8897%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (4 samples, 0.48%)</title><rect x="82.8775%" y="213" width="0.4756%" height="15" fill="rgb(205,117,38)" fg:x="697" fg:w="4"/><text x="83.1275%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (4 samples, 0.48%)</title><rect x="82.8775%" y="197" width="0.4756%" height="15" fill="rgb(237,72,25)" fg:x="697" fg:w="4"/><text x="83.1275%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (16 samples, 1.90%)</title><rect x="83.3532%" y="213" width="1.9025%" height="15" fill="rgb(244,70,9)" fg:x="701" fg:w="16"/><text x="83.6032%" y="223.50">l..</text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (16 samples, 1.90%)</title><rect x="83.3532%" y="197" width="1.9025%" height="15" fill="rgb(217,125,39)" fg:x="701" fg:w="16"/><text x="83.6032%" y="207.50">l..</text></g><g><title>nn_from_scratch`&lt;nn_lib::layer::ActivationLayer as nn_lib::layer::Layer&gt;::propagate_backward (1 samples, 0.12%)</title><rect x="85.2556%" y="213" width="0.1189%" height="15" fill="rgb(235,36,10)" fg:x="717" fg:w="1"/><text x="85.5056%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Mul&lt;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (1 samples, 0.12%)</title><rect x="85.2556%" y="197" width="0.1189%" height="15" fill="rgb(251,123,47)" fg:x="717" fg:w="1"/><text x="85.5056%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_posix_memalign (1 samples, 0.12%)</title><rect x="85.7313%" y="133" width="0.1189%" height="15" fill="rgb(221,13,13)" fg:x="721" fg:w="1"/><text x="85.9813%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.12%)</title><rect x="85.8502%" y="133" width="0.1189%" height="15" fill="rgb(238,131,9)" fg:x="722" fg:w="1"/><text x="86.1002%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.12%)</title><rect x="85.8502%" y="117" width="0.1189%" height="15" fill="rgb(211,50,8)" fg:x="722" fg:w="1"/><text x="86.1002%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.12%)</title><rect x="85.9691%" y="69" width="0.1189%" height="15" fill="rgb(245,182,24)" fg:x="723" fg:w="1"/><text x="86.2191%" y="79.50"></text></g><g><title>nn_from_scratch`__rdl_alloc (4 samples, 0.48%)</title><rect x="85.9691%" y="133" width="0.4756%" height="15" fill="rgb(242,14,37)" fg:x="723" fg:w="4"/><text x="86.2191%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_posix_memalign (4 samples, 0.48%)</title><rect x="85.9691%" y="117" width="0.4756%" height="15" fill="rgb(246,228,12)" fg:x="723" fg:w="4"/><text x="86.2191%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (4 samples, 0.48%)</title><rect x="85.9691%" y="101" width="0.4756%" height="15" fill="rgb(213,55,15)" fg:x="723" fg:w="4"/><text x="86.2191%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_memalign (4 samples, 0.48%)</title><rect x="85.9691%" y="85" width="0.4756%" height="15" fill="rgb(209,9,3)" fg:x="723" fg:w="4"/><text x="86.2191%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.36%)</title><rect x="86.0880%" y="69" width="0.3567%" height="15" fill="rgb(230,59,30)" fg:x="724" fg:w="3"/><text x="86.3380%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.36%)</title><rect x="86.0880%" y="53" width="0.3567%" height="15" fill="rgb(209,121,21)" fg:x="724" fg:w="3"/><text x="86.3380%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.12%)</title><rect x="86.3258%" y="37" width="0.1189%" height="15" fill="rgb(220,109,13)" fg:x="726" fg:w="1"/><text x="86.5758%" y="47.50"></text></g><g><title>nn_from_scratch`&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize (10 samples, 1.19%)</title><rect x="85.4935%" y="197" width="1.1891%" height="15" fill="rgb(232,18,1)" fg:x="719" fg:w="10"/><text x="85.7435%" y="207.50"></text></g><g><title> 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize (10 samples, 1.19%)</title><rect x="85.4935%" y="181" width="1.1891%" height="15" fill="rgb(215,41,42)" fg:x="719" fg:w="10"/><text x="85.7435%" y="191.50"></text></g><g><title> 2]&gt;&gt;&gt;&gt;::dot (10 samples, 1.19%)</title><rect x="85.4935%" y="165" width="1.1891%" height="15" fill="rgb(224,123,36)" fg:x="719" fg:w="10"/><text x="85.7435%" y="175.50"></text></g><g><title>nn_from_scratch`matrixmultiply::gemm::gemm_loop (10 samples, 1.19%)</title><rect x="85.4935%" y="149" width="1.1891%" height="15" fill="rgb(240,125,3)" fg:x="719" fg:w="10"/><text x="85.7435%" y="159.50"></text></g><g><title>nn_from_scratch`core::ops::function::impls::_&lt;impl core::ops::function::Fn&lt;A&gt; for &amp;F&gt;::call (2 samples, 0.24%)</title><rect x="86.4447%" y="133" width="0.2378%" height="15" fill="rgb(205,98,50)" fg:x="727" fg:w="2"/><text x="86.6947%" y="143.50"></text></g><g><title>nn_from_scratch`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (2 samples, 0.24%)</title><rect x="86.4447%" y="117" width="0.2378%" height="15" fill="rgb(205,185,37)" fg:x="727" fg:w="2"/><text x="86.6947%" y="127.50"></text></g><g><title>nn_from_scratch`core::ops::function::impls::_&lt;impl core::ops::function::Fn&lt;A&gt; for &amp;F&gt;::call (2 samples, 0.24%)</title><rect x="86.4447%" y="101" width="0.2378%" height="15" fill="rgb(238,207,15)" fg:x="727" fg:w="2"/><text x="86.6947%" y="111.50"></text></g><g><title>nn_from_scratch`matrixmultiply::dgemm_kernel::kernel_target_neon (1 samples, 0.12%)</title><rect x="86.5636%" y="85" width="0.1189%" height="15" fill="rgb(213,199,42)" fg:x="728" fg:w="1"/><text x="86.8136%" y="95.50"></text></g><g><title>nn_from_scratch`&lt;nn_lib::layer::DenseLayer as nn_lib::layer::Layer&gt;::propagate_backward (12 samples, 1.43%)</title><rect x="85.3746%" y="213" width="1.4269%" height="15" fill="rgb(235,201,11)" fg:x="718" fg:w="12"/><text x="85.6246%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::into_shape (1 samples, 0.12%)</title><rect x="86.6825%" y="197" width="0.1189%" height="15" fill="rgb(207,46,11)" fg:x="729" fg:w="1"/><text x="86.9325%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.12%)</title><rect x="86.8014%" y="197" width="0.1189%" height="15" fill="rgb(241,35,35)" fg:x="730" fg:w="1"/><text x="87.0514%" y="207.50"></text></g><g><title>nn_from_scratch`&lt;nn_lib::layer::DenseLayer as nn_lib::layer::Trainable&gt;::get_gradients (1 samples, 0.12%)</title><rect x="86.9203%" y="197" width="0.1189%" height="15" fill="rgb(243,32,47)" fg:x="731" fg:w="1"/><text x="87.1703%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::impl_clone::_&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (1 samples, 0.12%)</title><rect x="86.9203%" y="181" width="0.1189%" height="15" fill="rgb(247,202,23)" fg:x="731" fg:w="1"/><text x="87.1703%" y="191.50"></text></g><g><title>nn_from_scratch`ndarray::ArrayBase&lt;S,D&gt;::broadcast_assume (1 samples, 0.12%)</title><rect x="87.0392%" y="181" width="0.1189%" height="15" fill="rgb(219,102,11)" fg:x="732" fg:w="1"/><text x="87.2892%" y="191.50"></text></g><g><title>nn_from_scratch`&lt;nn_lib::optimizer::GradientDescent as nn_lib::optimizer::Optimizer&gt;::step (4 samples, 0.48%)</title><rect x="86.8014%" y="213" width="0.4756%" height="15" fill="rgb(243,110,44)" fg:x="730" fg:w="4"/><text x="87.0514%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (2 samples, 0.24%)</title><rect x="87.0392%" y="197" width="0.2378%" height="15" fill="rgb(222,74,54)" fg:x="732" fg:w="2"/><text x="87.2892%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::is_contiguous (1 samples, 0.12%)</title><rect x="87.1581%" y="181" width="0.1189%" height="15" fill="rgb(216,99,12)" fg:x="733" fg:w="1"/><text x="87.4081%" y="191.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::is_contiguous (2 samples, 0.24%)</title><rect x="87.2771%" y="197" width="0.2378%" height="15" fill="rgb(226,22,26)" fg:x="734" fg:w="2"/><text x="87.5271%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::default_strides (2 samples, 0.24%)</title><rect x="87.2771%" y="181" width="0.2378%" height="15" fill="rgb(217,163,10)" fg:x="734" fg:w="2"/><text x="87.5271%" y="191.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::ndindex::_&lt;impl ndarray::dimension::conversion::IntoDimension for &amp;[usize]&gt;::into_dimension (1 samples, 0.12%)</title><rect x="87.3960%" y="165" width="0.1189%" height="15" fill="rgb(213,25,53)" fg:x="735" fg:w="1"/><text x="87.6460%" y="175.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::to_owned (3 samples, 0.36%)</title><rect x="87.2771%" y="213" width="0.3567%" height="15" fill="rgb(252,105,26)" fg:x="734" fg:w="3"/><text x="87.5271%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_vec_unchecked (1 samples, 0.12%)</title><rect x="87.5149%" y="197" width="0.1189%" height="15" fill="rgb(220,39,43)" fg:x="736" fg:w="1"/><text x="87.7649%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (2 samples, 0.24%)</title><rect x="87.6338%" y="213" width="0.2378%" height="15" fill="rgb(229,68,48)" fg:x="737" fg:w="2"/><text x="87.8838%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::broadcast_with (2 samples, 0.24%)</title><rect x="87.6338%" y="197" width="0.2378%" height="15" fill="rgb(252,8,32)" fg:x="737" fg:w="2"/><text x="87.8838%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::broadcast::co_broadcast (2 samples, 0.24%)</title><rect x="87.6338%" y="181" width="0.2378%" height="15" fill="rgb(223,20,43)" fg:x="737" fg:w="2"/><text x="87.8838%" y="191.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::ndindex::_&lt;impl ndarray::dimension::conversion::IntoDimension for &amp;[usize]&gt;::into_dimension (2 samples, 0.24%)</title><rect x="87.6338%" y="165" width="0.2378%" height="15" fill="rgb(229,81,49)" fg:x="737" fg:w="2"/><text x="87.8838%" y="175.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map_inplace (1 samples, 0.12%)</title><rect x="87.8716%" y="197" width="0.1189%" height="15" fill="rgb(236,28,36)" fg:x="739" fg:w="1"/><text x="88.1216%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::is_contiguous (1 samples, 0.12%)</title><rect x="87.8716%" y="181" width="0.1189%" height="15" fill="rgb(249,185,26)" fg:x="739" fg:w="1"/><text x="88.1216%" y="191.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::default_strides (1 samples, 0.12%)</title><rect x="87.8716%" y="165" width="0.1189%" height="15" fill="rgb(249,174,33)" fg:x="739" fg:w="1"/><text x="88.1216%" y="175.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::ndindex::_&lt;impl ndarray::dimension::conversion::IntoDimension for &amp;[usize]&gt;::into_dimension (1 samples, 0.12%)</title><rect x="87.8716%" y="149" width="0.1189%" height="15" fill="rgb(233,201,37)" fg:x="739" fg:w="1"/><text x="88.1216%" y="159.50"></text></g><g><title>nn_from_scratch`ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Add&lt;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (1 samples, 0.12%)</title><rect x="87.9905%" y="197" width="0.1189%" height="15" fill="rgb(221,78,26)" fg:x="740" fg:w="1"/><text x="88.2405%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (1 samples, 0.12%)</title><rect x="87.9905%" y="181" width="0.1189%" height="15" fill="rgb(250,127,30)" fg:x="740" fg:w="1"/><text x="88.2405%" y="191.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::is_contiguous (1 samples, 0.12%)</title><rect x="87.9905%" y="165" width="0.1189%" height="15" fill="rgb(230,49,44)" fg:x="740" fg:w="1"/><text x="88.2405%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.12%)</title><rect x="88.1094%" y="181" width="0.1189%" height="15" fill="rgb(229,67,23)" fg:x="741" fg:w="1"/><text x="88.3594%" y="191.50"></text></g><g><title>nn_from_scratch`nn_lib::cost::CostFunction::cost (5 samples, 0.59%)</title><rect x="87.8716%" y="213" width="0.5945%" height="15" fill="rgb(249,83,47)" fg:x="739" fg:w="5"/><text x="88.1216%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Mul&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (3 samples, 0.36%)</title><rect x="88.1094%" y="197" width="0.3567%" height="15" fill="rgb(215,43,3)" fg:x="741" fg:w="3"/><text x="88.3594%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::zip::Zip&lt;(P1,P2),D&gt;::map_collect_owned (2 samples, 0.24%)</title><rect x="88.2283%" y="181" width="0.2378%" height="15" fill="rgb(238,154,13)" fg:x="742" fg:w="2"/><text x="88.4783%" y="191.50"></text></g><g><title>nn_from_scratch`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::build_uninit (1 samples, 0.12%)</title><rect x="88.3472%" y="165" width="0.1189%" height="15" fill="rgb(219,56,2)" fg:x="743" fg:w="1"/><text x="88.5972%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.12%)</title><rect x="88.5850%" y="197" width="0.1189%" height="15" fill="rgb(233,0,4)" fg:x="745" fg:w="1"/><text x="88.8350%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (2 samples, 0.24%)</title><rect x="88.7039%" y="197" width="0.2378%" height="15" fill="rgb(235,30,7)" fg:x="746" fg:w="2"/><text x="88.9539%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (2 samples, 0.24%)</title><rect x="88.7039%" y="181" width="0.2378%" height="15" fill="rgb(250,79,13)" fg:x="746" fg:w="2"/><text x="88.9539%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (6 samples, 0.71%)</title><rect x="88.9417%" y="197" width="0.7134%" height="15" fill="rgb(211,146,34)" fg:x="748" fg:w="6"/><text x="89.1917%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (6 samples, 0.71%)</title><rect x="88.9417%" y="181" width="0.7134%" height="15" fill="rgb(228,22,38)" fg:x="748" fg:w="6"/><text x="89.1917%" y="191.50"></text></g><g><title>nn_from_scratch`&lt;nn_lib::layer::ActivationLayer as nn_lib::layer::Layer&gt;::feed_forward (6 samples, 0.71%)</title><rect x="89.6552%" y="197" width="0.7134%" height="15" fill="rgb(235,168,5)" fg:x="754" fg:w="6"/><text x="89.9052%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (6 samples, 0.71%)</title><rect x="89.6552%" y="181" width="0.7134%" height="15" fill="rgb(221,155,16)" fg:x="754" fg:w="6"/><text x="89.9052%" y="191.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::is_contiguous (4 samples, 0.48%)</title><rect x="89.8930%" y="165" width="0.4756%" height="15" fill="rgb(215,215,53)" fg:x="756" fg:w="4"/><text x="90.1430%" y="175.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::default_strides (4 samples, 0.48%)</title><rect x="89.8930%" y="149" width="0.4756%" height="15" fill="rgb(223,4,10)" fg:x="756" fg:w="4"/><text x="90.1430%" y="159.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::ndindex::_&lt;impl ndarray::dimension::conversion::IntoDimension for &amp;[usize]&gt;::into_dimension (2 samples, 0.24%)</title><rect x="90.1308%" y="133" width="0.2378%" height="15" fill="rgb(234,103,6)" fg:x="758" fg:w="2"/><text x="90.3808%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.12%)</title><rect x="90.3686%" y="181" width="0.1189%" height="15" fill="rgb(227,97,0)" fg:x="760" fg:w="1"/><text x="90.6186%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.12%)</title><rect x="90.4875%" y="53" width="0.1189%" height="15" fill="rgb(234,150,53)" fg:x="761" fg:w="1"/><text x="90.7375%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.12%)</title><rect x="90.4875%" y="37" width="0.1189%" height="15" fill="rgb(228,201,54)" fg:x="761" fg:w="1"/><text x="90.7375%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.12%)</title><rect x="90.6064%" y="53" width="0.1189%" height="15" fill="rgb(222,22,37)" fg:x="762" fg:w="1"/><text x="90.8564%" y="63.50"></text></g><g><title>nn_from_scratch`__rdl_alloc (3 samples, 0.36%)</title><rect x="90.4875%" y="117" width="0.3567%" height="15" fill="rgb(237,53,32)" fg:x="761" fg:w="3"/><text x="90.7375%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_posix_memalign (3 samples, 0.36%)</title><rect x="90.4875%" y="101" width="0.3567%" height="15" fill="rgb(233,25,53)" fg:x="761" fg:w="3"/><text x="90.7375%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (3 samples, 0.36%)</title><rect x="90.4875%" y="85" width="0.3567%" height="15" fill="rgb(210,40,34)" fg:x="761" fg:w="3"/><text x="90.7375%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_memalign (3 samples, 0.36%)</title><rect x="90.4875%" y="69" width="0.3567%" height="15" fill="rgb(241,220,44)" fg:x="761" fg:w="3"/><text x="90.7375%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.12%)</title><rect x="90.7253%" y="53" width="0.1189%" height="15" fill="rgb(235,28,35)" fg:x="763" fg:w="1"/><text x="90.9753%" y="63.50"></text></g><g><title>nn_from_scratch`&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize (5 samples, 0.59%)</title><rect x="90.4875%" y="181" width="0.5945%" height="15" fill="rgb(210,56,17)" fg:x="761" fg:w="5"/><text x="90.7375%" y="191.50"></text></g><g><title> 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize (5 samples, 0.59%)</title><rect x="90.4875%" y="165" width="0.5945%" height="15" fill="rgb(224,130,29)" fg:x="761" fg:w="5"/><text x="90.7375%" y="175.50"></text></g><g><title> 2]&gt;&gt;&gt;&gt;::dot (5 samples, 0.59%)</title><rect x="90.4875%" y="149" width="0.5945%" height="15" fill="rgb(235,212,8)" fg:x="761" fg:w="5"/><text x="90.7375%" y="159.50"></text></g><g><title>nn_from_scratch`matrixmultiply::gemm::gemm_loop (5 samples, 0.59%)</title><rect x="90.4875%" y="133" width="0.5945%" height="15" fill="rgb(223,33,50)" fg:x="761" fg:w="5"/><text x="90.7375%" y="143.50"></text></g><g><title>nn_from_scratch`core::ops::function::impls::_&lt;impl core::ops::function::Fn&lt;A&gt; for &amp;F&gt;::call (2 samples, 0.24%)</title><rect x="90.8442%" y="117" width="0.2378%" height="15" fill="rgb(219,149,13)" fg:x="764" fg:w="2"/><text x="91.0942%" y="127.50"></text></g><g><title>nn_from_scratch`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (2 samples, 0.24%)</title><rect x="90.8442%" y="101" width="0.2378%" height="15" fill="rgb(250,156,29)" fg:x="764" fg:w="2"/><text x="91.0942%" y="111.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::into_shape (1 samples, 0.12%)</title><rect x="91.0820%" y="181" width="0.1189%" height="15" fill="rgb(216,193,19)" fg:x="766" fg:w="1"/><text x="91.3320%" y="191.50"></text></g><g><title>nn_from_scratch`rayon::iter::plumbing::bridge_producer_consumer::helper (75 samples, 8.92%)</title><rect x="82.4019%" y="261" width="8.9180%" height="15" fill="rgb(216,135,14)" fg:x="693" fg:w="75"/><text x="82.6519%" y="271.50">nn_from_scrat..</text></g><g><title>nn_from_scratch`rayon::iter::plumbing::Folder::consume_iter (75 samples, 8.92%)</title><rect x="82.4019%" y="245" width="8.9180%" height="15" fill="rgb(241,47,5)" fg:x="693" fg:w="75"/><text x="82.6519%" y="255.50">nn_from_scrat..</text></g><g><title>nn_from_scratch`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (73 samples, 8.68%)</title><rect x="82.6397%" y="229" width="8.6801%" height="15" fill="rgb(233,42,35)" fg:x="695" fg:w="73"/><text x="82.8897%" y="239.50">nn_from_scra..</text></g><g><title>nn_from_scratch`nn_lib::neural_network::NeuralNetwork::predict (24 samples, 2.85%)</title><rect x="88.4661%" y="213" width="2.8537%" height="15" fill="rgb(231,13,6)" fg:x="744" fg:w="24"/><text x="88.7161%" y="223.50">nn..</text></g><g><title>nn_from_scratch`&lt;nn_lib::layer::DenseLayer as nn_lib::layer::Layer&gt;::feed_forward (8 samples, 0.95%)</title><rect x="90.3686%" y="197" width="0.9512%" height="15" fill="rgb(207,181,40)" fg:x="760" fg:w="8"/><text x="90.6186%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::view (1 samples, 0.12%)</title><rect x="91.2010%" y="181" width="0.1189%" height="15" fill="rgb(254,173,49)" fg:x="767" fg:w="1"/><text x="91.4510%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (23 samples, 2.73%)</title><rect x="91.3199%" y="245" width="2.7348%" height="15" fill="rgb(221,1,38)" fg:x="768" fg:w="23"/><text x="91.5699%" y="255.50">li..</text></g><g><title>nn_from_scratch`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (189 samples, 22.47%)</title><rect x="71.7004%" y="293" width="22.4732%" height="15" fill="rgb(206,124,46)" fg:x="603" fg:w="189"/><text x="71.9504%" y="303.50">nn_from_scratch`&lt;rayon_core::job::St..</text></g><g><title>nn_from_scratch`rayon_core::join::join_context::_{{closure}} (99 samples, 11.77%)</title><rect x="82.4019%" y="277" width="11.7717%" height="15" fill="rgb(249,21,11)" fg:x="693" fg:w="99"/><text x="82.6519%" y="287.50">nn_from_scratch`r..</text></g><g><title>nn_from_scratch`rayon_core::registry::WorkerThread::wait_until_cold (24 samples, 2.85%)</title><rect x="91.3199%" y="261" width="2.8537%" height="15" fill="rgb(222,201,40)" fg:x="768" fg:w="24"/><text x="91.5699%" y="271.50">nn..</text></g><g><title>nn_from_scratch`rayon_core::registry::WorkerThread::find_work (1 samples, 0.12%)</title><rect x="94.0547%" y="245" width="0.1189%" height="15" fill="rgb(235,61,29)" fg:x="791" fg:w="1"/><text x="94.3047%" y="255.50"></text></g><g><title>nn_from_scratch`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.12%)</title><rect x="94.0547%" y="229" width="0.1189%" height="15" fill="rgb(219,207,3)" fg:x="791" fg:w="1"/><text x="94.3047%" y="239.50"></text></g><g><title>nn_from_scratch`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1 samples, 0.12%)</title><rect x="94.0547%" y="213" width="0.1189%" height="15" fill="rgb(222,56,46)" fg:x="791" fg:w="1"/><text x="94.3047%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.12%)</title><rect x="94.0547%" y="197" width="0.1189%" height="15" fill="rgb(239,76,54)" fg:x="791" fg:w="1"/><text x="94.3047%" y="207.50"></text></g><g><title>nn_from_scratch`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1 samples, 0.12%)</title><rect x="94.1736%" y="293" width="0.1189%" height="15" fill="rgb(231,124,27)" fg:x="792" fg:w="1"/><text x="94.4236%" y="303.50"></text></g><g><title>nn_from_scratch`crossbeam_deque::deque::Worker&lt;T&gt;::pop (1 samples, 0.12%)</title><rect x="94.2925%" y="293" width="0.1189%" height="15" fill="rgb(249,195,6)" fg:x="793" fg:w="1"/><text x="94.5425%" y="303.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.12%)</title><rect x="95.2438%" y="261" width="0.1189%" height="15" fill="rgb(237,174,47)" fg:x="801" fg:w="1"/><text x="95.4938%" y="271.50"></text></g><g><title>nn_from_scratch`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (24 samples, 2.85%)</title><rect x="95.3627%" y="261" width="2.8537%" height="15" fill="rgb(206,201,31)" fg:x="802" fg:w="24"/><text x="95.6127%" y="271.50">nn..</text></g><g><title>nn_from_scratch`crossbeam_epoch::default::with_handle (10 samples, 1.19%)</title><rect x="97.0273%" y="245" width="1.1891%" height="15" fill="rgb(231,57,52)" fg:x="816" fg:w="10"/><text x="97.2773%" y="255.50"></text></g><g><title>nn_from_scratch`crossbeam_epoch::internal::Global::collect (2 samples, 0.24%)</title><rect x="97.9786%" y="229" width="0.2378%" height="15" fill="rgb(248,177,22)" fg:x="824" fg:w="2"/><text x="98.2286%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.24%)</title><rect x="97.9786%" y="213" width="0.2378%" height="15" fill="rgb(215,211,37)" fg:x="824" fg:w="2"/><text x="98.2286%" y="223.50"></text></g><g><title>nn_from_scratch`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (33 samples, 3.92%)</title><rect x="94.5303%" y="277" width="3.9239%" height="15" fill="rgb(241,128,51)" fg:x="795" fg:w="33"/><text x="94.7803%" y="287.50">nn_f..</text></g><g><title>nn_from_scratch`crossbeam_epoch::default::with_handle (2 samples, 0.24%)</title><rect x="98.2164%" y="261" width="0.2378%" height="15" fill="rgb(227,165,31)" fg:x="826" fg:w="2"/><text x="98.4664%" y="271.50"></text></g><g><title>nn_from_scratch`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (3 samples, 0.36%)</title><rect x="98.4542%" y="277" width="0.3567%" height="15" fill="rgb(228,167,24)" fg:x="828" fg:w="3"/><text x="98.7042%" y="287.50"></text></g><g><title>nn_from_scratch`crossbeam_epoch::default::with_handle (1 samples, 0.12%)</title><rect x="98.6920%" y="261" width="0.1189%" height="15" fill="rgb(228,143,12)" fg:x="830" fg:w="1"/><text x="98.9420%" y="271.50"></text></g><g><title>nn_from_scratch`crossbeam_epoch::internal::Global::collect (1 samples, 0.12%)</title><rect x="98.6920%" y="245" width="0.1189%" height="15" fill="rgb(249,149,8)" fg:x="830" fg:w="1"/><text x="98.9420%" y="255.50"></text></g><g><title>nn_from_scratch`crossbeam_epoch::internal::Global::try_advance (1 samples, 0.12%)</title><rect x="98.6920%" y="229" width="0.1189%" height="15" fill="rgb(243,35,44)" fg:x="830" fg:w="1"/><text x="98.9420%" y="239.50"></text></g><g><title>nn_from_scratch`&lt;crossbeam_epoch::sync::list::Iter&lt;T,C&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="98.6920%" y="213" width="0.1189%" height="15" fill="rgb(246,89,9)" fg:x="830" fg:w="1"/><text x="98.9420%" y="223.50"></text></g><g><title>nn_from_scratch`rayon_core::registry::WorkerThread::find_work (38 samples, 4.52%)</title><rect x="94.4114%" y="293" width="4.5184%" height="15" fill="rgb(233,213,13)" fg:x="794" fg:w="38"/><text x="94.6614%" y="303.50">nn_fr..</text></g><g><title>nn_from_scratch`crossbeam_deque::deque::Worker&lt;T&gt;::pop (1 samples, 0.12%)</title><rect x="98.8109%" y="277" width="0.1189%" height="15" fill="rgb(233,141,41)" fg:x="831" fg:w="1"/><text x="99.0609%" y="287.50"></text></g><g><title>nn_from_scratch`rayon_core::sleep::Sleep::sleep (6 samples, 0.71%)</title><rect x="98.9298%" y="293" width="0.7134%" height="15" fill="rgb(239,167,4)" fg:x="832" fg:w="6"/><text x="99.1798%" y="303.50"></text></g><g><title>nn_from_scratch`std::sync::condvar::Condvar::wait (6 samples, 0.71%)</title><rect x="98.9298%" y="277" width="0.7134%" height="15" fill="rgb(209,217,16)" fg:x="832" fg:w="6"/><text x="99.1798%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (6 samples, 0.71%)</title><rect x="98.9298%" y="261" width="0.7134%" height="15" fill="rgb(219,88,35)" fg:x="832" fg:w="6"/><text x="99.1798%" y="271.50"></text></g><g><title>all (841 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(220,193,23)" fg:x="0" fg:w="841"/><text x="0.2500%" y="431.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (800 samples, 95.12%)</title><rect x="4.8751%" y="405" width="95.1249%" height="15" fill="rgb(230,90,52)" fg:x="41" fg:w="800"/><text x="5.1251%" y="415.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (800 samples, 95.12%)</title><rect x="4.8751%" y="389" width="95.1249%" height="15" fill="rgb(252,106,19)" fg:x="41" fg:w="800"/><text x="5.1251%" y="399.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>nn_from_scratch`std::sys::pal::unix::thread::Thread::new::thread_start (800 samples, 95.12%)</title><rect x="4.8751%" y="373" width="95.1249%" height="15" fill="rgb(206,74,20)" fg:x="41" fg:w="800"/><text x="5.1251%" y="383.50">nn_from_scratch`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>nn_from_scratch`core::ops::function::FnOnce::call_once{{vtable.shim}} (800 samples, 95.12%)</title><rect x="4.8751%" y="357" width="95.1249%" height="15" fill="rgb(230,138,44)" fg:x="41" fg:w="800"/><text x="5.1251%" y="367.50">nn_from_scratch`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>nn_from_scratch`std::sys_common::backtrace::__rust_begin_short_backtrace (800 samples, 95.12%)</title><rect x="4.8751%" y="341" width="95.1249%" height="15" fill="rgb(235,182,43)" fg:x="41" fg:w="800"/><text x="5.1251%" y="351.50">nn_from_scratch`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>nn_from_scratch`rayon_core::registry::ThreadBuilder::run (800 samples, 95.12%)</title><rect x="4.8751%" y="325" width="95.1249%" height="15" fill="rgb(242,16,51)" fg:x="41" fg:w="800"/><text x="5.1251%" y="335.50">nn_from_scratch`rayon_core::registry::ThreadBuilder::run</text></g><g><title>nn_from_scratch`rayon_core::registry::WorkerThread::wait_until_cold (800 samples, 95.12%)</title><rect x="4.8751%" y="309" width="95.1249%" height="15" fill="rgb(248,9,4)" fg:x="41" fg:w="800"/><text x="5.1251%" y="319.50">nn_from_scratch`rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>nn_from_scratch`rayon_core::sleep::Sleep::wake_any_threads (3 samples, 0.36%)</title><rect x="99.6433%" y="293" width="0.3567%" height="15" fill="rgb(210,31,22)" fg:x="838" fg:w="3"/><text x="99.8933%" y="303.50"></text></g><g><title>nn_from_scratch`rayon_core::sleep::Sleep::wake_specific_thread (3 samples, 0.36%)</title><rect x="99.6433%" y="277" width="0.3567%" height="15" fill="rgb(239,54,39)" fg:x="838" fg:w="3"/><text x="99.8933%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (3 samples, 0.36%)</title><rect x="99.6433%" y="261" width="0.3567%" height="15" fill="rgb(230,99,41)" fg:x="838" fg:w="3"/><text x="99.8933%" y="271.50"></text></g></svg></svg>