<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="104614"><g><title>libsystem_malloc.dylib`_szone_free (20 samples, 0.02%)</title><rect x="0.0076%" y="245" width="0.0191%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="20"/><text x="0.2576%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_large (17 samples, 0.02%)</title><rect x="0.0105%" y="229" width="0.0163%" height="15" fill="rgb(217,0,24)" fg:x="11" fg:w="17"/><text x="0.2605%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (17 samples, 0.02%)</title><rect x="0.0105%" y="213" width="0.0163%" height="15" fill="rgb(221,193,54)" fg:x="11" fg:w="17"/><text x="0.2605%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (17 samples, 0.02%)</title><rect x="0.0105%" y="197" width="0.0163%" height="15" fill="rgb(248,212,6)" fg:x="11" fg:w="17"/><text x="0.2605%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (140 samples, 0.13%)</title><rect x="0.0268%" y="245" width="0.1338%" height="15" fill="rgb(208,68,35)" fg:x="28" fg:w="140"/><text x="0.2768%" y="255.50"></text></g><g><title>nn_from_scratch`miniz_oxide::inflate::core::decompress (113 samples, 0.11%)</title><rect x="0.1701%" y="101" width="0.1080%" height="15" fill="rgb(232,128,0)" fg:x="178" fg:w="113"/><text x="0.4201%" y="111.50"></text></g><g><title>nn_from_scratch`miniz_oxide::inflate::core::transfer (43 samples, 0.04%)</title><rect x="0.2371%" y="85" width="0.0411%" height="15" fill="rgb(207,160,47)" fg:x="248" fg:w="43"/><text x="0.4871%" y="95.50"></text></g><g><title>nn_from_scratch`&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (120 samples, 0.11%)</title><rect x="0.1663%" y="181" width="0.1147%" height="15" fill="rgb(228,23,34)" fg:x="174" fg:w="120"/><text x="0.4163%" y="191.50"></text></g><g><title>nn_from_scratch`flate2::zio::read (120 samples, 0.11%)</title><rect x="0.1663%" y="165" width="0.1147%" height="15" fill="rgb(218,30,26)" fg:x="174" fg:w="120"/><text x="0.4163%" y="175.50"></text></g><g><title>nn_from_scratch`&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (119 samples, 0.11%)</title><rect x="0.1673%" y="149" width="0.1138%" height="15" fill="rgb(220,122,19)" fg:x="175" fg:w="119"/><text x="0.4173%" y="159.50"></text></g><g><title>nn_from_scratch`miniz_oxide::inflate::stream::inflate (118 samples, 0.11%)</title><rect x="0.1682%" y="133" width="0.1128%" height="15" fill="rgb(250,228,42)" fg:x="176" fg:w="118"/><text x="0.4182%" y="143.50"></text></g><g><title>nn_from_scratch`miniz_oxide::inflate::stream::inflate_loop (117 samples, 0.11%)</title><rect x="0.1692%" y="117" width="0.1118%" height="15" fill="rgb(240,193,28)" fg:x="177" fg:w="117"/><text x="0.4192%" y="127.50"></text></g><g><title>nn_from_scratch`crc32fast::Hasher::update (18 samples, 0.02%)</title><rect x="0.2810%" y="181" width="0.0172%" height="15" fill="rgb(216,20,37)" fg:x="294" fg:w="18"/><text x="0.5310%" y="191.50"></text></g><g><title>nn_from_scratch`mnist::utils::decompress_gz_file (158 samples, 0.15%)</title><rect x="0.1654%" y="213" width="0.1510%" height="15" fill="rgb(206,188,39)" fg:x="173" fg:w="158"/><text x="0.4154%" y="223.50"></text></g><g><title>nn_from_scratch`&lt;std::io::buffered::bufwriter::BufWriter&lt;I&gt; as std::io::copy::BufferedWriterSpec&gt;::copy_from (157 samples, 0.15%)</title><rect x="0.1663%" y="197" width="0.1501%" height="15" fill="rgb(217,207,13)" fg:x="174" fg:w="157"/><text x="0.4163%" y="207.50"></text></g><g><title>nn_from_scratch`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (19 samples, 0.02%)</title><rect x="0.2982%" y="181" width="0.0182%" height="15" fill="rgb(231,73,38)" fg:x="312" fg:w="19"/><text x="0.5482%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`write (19 samples, 0.02%)</title><rect x="0.2982%" y="165" width="0.0182%" height="15" fill="rgb(225,20,46)" fg:x="312" fg:w="19"/><text x="0.5482%" y="175.50"></text></g><g><title>nn_from_scratch`mnist::dataset::load_dataset (161 samples, 0.15%)</title><rect x="0.1654%" y="245" width="0.1539%" height="15" fill="rgb(210,31,41)" fg:x="173" fg:w="161"/><text x="0.4154%" y="255.50"></text></g><g><title>nn_from_scratch`mnist::dataset::load_file (161 samples, 0.15%)</title><rect x="0.1654%" y="229" width="0.1539%" height="15" fill="rgb(221,200,47)" fg:x="173" fg:w="161"/><text x="0.4154%" y="239.50"></text></g><g><title>nn_from_scratch`mnist::network::prepare_data (69 samples, 0.07%)</title><rect x="0.3193%" y="245" width="0.0660%" height="15" fill="rgb(226,26,5)" fg:x="334" fg:w="69"/><text x="0.5693%" y="255.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (66 samples, 0.06%)</title><rect x="0.3221%" y="229" width="0.0631%" height="15" fill="rgb(249,33,26)" fg:x="337" fg:w="66"/><text x="0.5721%" y="239.50"></text></g><g><title>nn_from_scratch`nn_lib::neural_network::NeuralNetwork::create_batches (22 samples, 0.02%)</title><rect x="0.3900%" y="229" width="0.0210%" height="15" fill="rgb(235,183,28)" fg:x="408" fg:w="22"/><text x="0.6400%" y="239.50"></text></g><g><title>nn_from_scratch`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 0.02%)</title><rect x="0.3910%" y="213" width="0.0201%" height="15" fill="rgb(221,5,38)" fg:x="409" fg:w="21"/><text x="0.6410%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::select (21 samples, 0.02%)</title><rect x="0.3910%" y="197" width="0.0201%" height="15" fill="rgb(247,18,42)" fg:x="409" fg:w="21"/><text x="0.6410%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::stacking::concatenate (21 samples, 0.02%)</title><rect x="0.3910%" y="181" width="0.0201%" height="15" fill="rgb(241,131,45)" fg:x="409" fg:w="21"/><text x="0.6410%" y="191.50"></text></g><g><title>nn_from_scratch`ndarray::impl_owned_array::_&lt;impl ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;A&gt;,D&gt;&gt;::append (20 samples, 0.02%)</title><rect x="0.3919%" y="165" width="0.0191%" height="15" fill="rgb(249,31,29)" fg:x="410" fg:w="20"/><text x="0.6419%" y="175.50"></text></g><g><title>nn_from_scratch`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (17 samples, 0.02%)</title><rect x="0.3948%" y="149" width="0.0163%" height="15" fill="rgb(225,111,53)" fg:x="413" fg:w="17"/><text x="0.6448%" y="159.50"></text></g><g><title>libBLAS.dylib`0x000000019956fb78 (31 samples, 0.03%)</title><rect x="0.4225%" y="101" width="0.0296%" height="15" fill="rgb(238,160,17)" fg:x="442" fg:w="31"/><text x="0.6725%" y="111.50"></text></g><g><title>libBLAS.dylib`0x000000019962ebd4 (26 samples, 0.02%)</title><rect x="0.4273%" y="85" width="0.0249%" height="15" fill="rgb(214,148,48)" fg:x="447" fg:w="26"/><text x="0.6773%" y="95.50"></text></g><g><title>libBLAS.dylib`0x0000000199642b10 (25 samples, 0.02%)</title><rect x="0.4282%" y="69" width="0.0239%" height="15" fill="rgb(232,36,49)" fg:x="448" fg:w="25"/><text x="0.6782%" y="79.50"></text></g><g><title>nn_from_scratch`&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize (32 samples, 0.03%)</title><rect x="0.4225%" y="197" width="0.0306%" height="15" fill="rgb(209,103,24)" fg:x="442" fg:w="32"/><text x="0.6725%" y="207.50"></text></g><g><title> 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize (32 samples, 0.03%)</title><rect x="0.4225%" y="181" width="0.0306%" height="15" fill="rgb(229,88,8)" fg:x="442" fg:w="32"/><text x="0.6725%" y="191.50"></text></g><g><title> 2]&gt;&gt;&gt;&gt;::dot (32 samples, 0.03%)</title><rect x="0.4225%" y="165" width="0.0306%" height="15" fill="rgb(213,181,19)" fg:x="442" fg:w="32"/><text x="0.6725%" y="175.50"></text></g><g><title>nn_from_scratch`ndarray::linalg::impl_linalg::mat_mul_impl (32 samples, 0.03%)</title><rect x="0.4225%" y="149" width="0.0306%" height="15" fill="rgb(254,191,54)" fg:x="442" fg:w="32"/><text x="0.6725%" y="159.50"></text></g><g><title>libBLAS.dylib`cblas_dgemm (32 samples, 0.03%)</title><rect x="0.4225%" y="133" width="0.0306%" height="15" fill="rgb(241,83,37)" fg:x="442" fg:w="32"/><text x="0.6725%" y="143.50"></text></g><g><title>libBLAS.dylib`0x0000000199666e24 (32 samples, 0.03%)</title><rect x="0.4225%" y="117" width="0.0306%" height="15" fill="rgb(233,36,39)" fg:x="442" fg:w="32"/><text x="0.6725%" y="127.50"></text></g><g><title>nn_from_scratch`nn_lib::neural_network::NeuralNetwork::evaluate (73 samples, 0.07%)</title><rect x="0.3852%" y="245" width="0.0698%" height="15" fill="rgb(226,3,54)" fg:x="403" fg:w="73"/><text x="0.6352%" y="255.50"></text></g><g><title>nn_from_scratch`nn_lib::neural_network::NeuralNetwork::predict (46 samples, 0.04%)</title><rect x="0.4110%" y="229" width="0.0440%" height="15" fill="rgb(245,192,40)" fg:x="430" fg:w="46"/><text x="0.6610%" y="239.50"></text></g><g><title>nn_from_scratch`&lt;nn_lib::layer::DenseLayer as nn_lib::layer::Layer&gt;::feed_forward (34 samples, 0.03%)</title><rect x="0.4225%" y="213" width="0.0325%" height="15" fill="rgb(238,167,29)" fg:x="442" fg:w="34"/><text x="0.6725%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (27 samples, 0.03%)</title><rect x="0.4818%" y="229" width="0.0258%" height="15" fill="rgb(232,182,51)" fg:x="504" fg:w="27"/><text x="0.7318%" y="239.50"></text></g><g><title>nn_from_scratch`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.01%)</title><rect x="0.5124%" y="229" width="0.0105%" height="15" fill="rgb(231,60,39)" fg:x="536" fg:w="11"/><text x="0.7624%" y="239.50"></text></g><g><title>nn_from_scratch`ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Mul&lt;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (69 samples, 0.07%)</title><rect x="0.5296%" y="213" width="0.0660%" height="15" fill="rgb(208,69,12)" fg:x="554" fg:w="69"/><text x="0.7796%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (91 samples, 0.09%)</title><rect x="0.6070%" y="197" width="0.0870%" height="15" fill="rgb(235,93,37)" fg:x="635" fg:w="91"/><text x="0.8570%" y="207.50"></text></g><g><title>nn_from_scratch`nn_lib::activation::Activation::apply_derivative (226 samples, 0.22%)</title><rect x="0.5955%" y="213" width="0.2160%" height="15" fill="rgb(213,116,39)" fg:x="623" fg:w="226"/><text x="0.8455%" y="223.50"></text></g><g><title>nn_from_scratch`nn_lib::activation::check_nan (121 samples, 0.12%)</title><rect x="0.6959%" y="197" width="0.1157%" height="15" fill="rgb(222,207,29)" fg:x="728" fg:w="121"/><text x="0.9459%" y="207.50"></text></g><g><title>nn_from_scratch`&lt;nn_lib::layer::ActivationLayer as nn_lib::layer::Layer&gt;::propagate_backward (298 samples, 0.28%)</title><rect x="0.5286%" y="229" width="0.2849%" height="15" fill="rgb(206,96,30)" fg:x="553" fg:w="298"/><text x="0.7786%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3,321 samples, 3.17%)</title><rect x="0.8632%" y="197" width="3.1745%" height="15" fill="rgb(218,138,4)" fg:x="903" fg:w="3321"/><text x="1.1132%" y="207.50">lib..</text></g><g><title>libsystem_malloc.dylib`free_medium (3,355 samples, 3.21%)</title><rect x="0.8421%" y="213" width="3.2070%" height="15" fill="rgb(250,191,14)" fg:x="881" fg:w="3355"/><text x="1.0921%" y="223.50">lib..</text></g><g><title>libsystem_malloc.dylib`free_small (12 samples, 0.01%)</title><rect x="4.0492%" y="213" width="0.0115%" height="15" fill="rgb(239,60,40)" fg:x="4236" fg:w="12"/><text x="4.2992%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13,411 samples, 12.82%)</title><rect x="4.0654%" y="213" width="12.8195%" height="15" fill="rgb(206,27,48)" fg:x="4253" fg:w="13411"/><text x="4.3154%" y="223.50">libsystem_platform...</text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (12 samples, 0.01%)</title><rect x="16.8935%" y="149" width="0.0115%" height="15" fill="rgb(225,35,8)" fg:x="17673" fg:w="12"/><text x="17.1435%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (12 samples, 0.01%)</title><rect x="16.8935%" y="133" width="0.0115%" height="15" fill="rgb(250,213,24)" fg:x="17673" fg:w="12"/><text x="17.1435%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (27 samples, 0.03%)</title><rect x="16.8926%" y="165" width="0.0258%" height="15" fill="rgb(247,123,22)" fg:x="17672" fg:w="27"/><text x="17.1426%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (14 samples, 0.01%)</title><rect x="16.9050%" y="149" width="0.0134%" height="15" fill="rgb(231,138,38)" fg:x="17685" fg:w="14"/><text x="17.1550%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (12 samples, 0.01%)</title><rect x="16.9069%" y="133" width="0.0115%" height="15" fill="rgb(231,145,46)" fg:x="17687" fg:w="12"/><text x="17.1569%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1,841 samples, 1.76%)</title><rect x="32.2003%" y="117" width="1.7598%" height="15" fill="rgb(251,118,11)" fg:x="33686" fg:w="1841"/><text x="32.4503%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1,869 samples, 1.79%)</title><rect x="32.1850%" y="133" width="1.7866%" height="15" fill="rgb(217,147,25)" fg:x="33670" fg:w="1869"/><text x="32.4350%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`free_small (21 samples, 0.02%)</title><rect x="33.9716%" y="133" width="0.0201%" height="15" fill="rgb(247,81,37)" fg:x="35539" fg:w="21"/><text x="34.2216%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (11 samples, 0.01%)</title><rect x="33.9993%" y="69" width="0.0105%" height="15" fill="rgb(209,12,38)" fg:x="35568" fg:w="11"/><text x="34.2493%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (24 samples, 0.02%)</title><rect x="33.9954%" y="101" width="0.0229%" height="15" fill="rgb(227,1,9)" fg:x="35564" fg:w="24"/><text x="34.2454%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.02%)</title><rect x="33.9964%" y="85" width="0.0220%" height="15" fill="rgb(248,47,43)" fg:x="35565" fg:w="23"/><text x="34.2464%" y="95.50"></text></g><g><title>nn_from_scratch`__rdl_alloc (29 samples, 0.03%)</title><rect x="33.9945%" y="133" width="0.0277%" height="15" fill="rgb(221,10,30)" fg:x="35563" fg:w="29"/><text x="34.2445%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_posix_memalign (28 samples, 0.03%)</title><rect x="33.9954%" y="117" width="0.0268%" height="15" fill="rgb(210,229,1)" fg:x="35564" fg:w="28"/><text x="34.2454%" y="127.50"></text></g><g><title>nn_from_scratch`core::ops::function::impls::_&lt;impl core::ops::function::Fn&lt;A&gt; for &amp;F&gt;::call (138 samples, 0.13%)</title><rect x="34.3969%" y="117" width="0.1319%" height="15" fill="rgb(222,148,37)" fg:x="35984" fg:w="138"/><text x="34.6469%" y="127.50"></text></g><g><title>nn_from_scratch`matrixmultiply::dgemm_kernel::kernel_target_neon (130 samples, 0.12%)</title><rect x="35.4379%" y="85" width="0.1243%" height="15" fill="rgb(234,67,33)" fg:x="37073" fg:w="130"/><text x="35.6879%" y="95.50"></text></g><g><title>nn_from_scratch`core::ops::function::impls::_&lt;impl core::ops::function::Fn&lt;A&gt; for &amp;F&gt;::call (1,073 samples, 1.03%)</title><rect x="34.5814%" y="101" width="1.0257%" height="15" fill="rgb(247,98,35)" fg:x="36177" fg:w="1073"/><text x="34.8314%" y="111.50"></text></g><g><title>nn_from_scratch`matrixmultiply::gemm::masked_kernel (47 samples, 0.04%)</title><rect x="35.5622%" y="85" width="0.0449%" height="15" fill="rgb(247,138,52)" fg:x="37203" fg:w="47"/><text x="35.8122%" y="95.50"></text></g><g><title>nn_from_scratch`matrixmultiply::dgemm_kernel::kernel_target_neon (19,559 samples, 18.70%)</title><rect x="35.6071%" y="101" width="18.6964%" height="15" fill="rgb(213,79,30)" fg:x="37250" fg:w="19559"/><text x="35.8571%" y="111.50">nn_from_scratch`matrixmultipl..</text></g><g><title>libsystem_kernel.dylib`swtch_pri (1,280 samples, 1.22%)</title><rect x="54.3283%" y="85" width="1.2235%" height="15" fill="rgb(246,177,23)" fg:x="56835" fg:w="1280"/><text x="54.5783%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (16 samples, 0.02%)</title><rect x="55.5547%" y="85" width="0.0153%" height="15" fill="rgb(230,62,27)" fg:x="58118" fg:w="16"/><text x="55.8047%" y="95.50"></text></g><g><title>nn_from_scratch`core::ops::function::impls::_&lt;impl core::ops::function::Fn&lt;A&gt; for &amp;F&gt;::call (22 samples, 0.02%)</title><rect x="55.5700%" y="85" width="0.0210%" height="15" fill="rgb(216,154,8)" fg:x="58134" fg:w="22"/><text x="55.8200%" y="95.50"></text></g><g><title>libdispatch.dylib`_dispatch_semaphore_signal_slow (227 samples, 0.22%)</title><rect x="55.6025%" y="53" width="0.2170%" height="15" fill="rgb(244,35,45)" fg:x="58168" fg:w="227"/><text x="55.8525%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`semaphore_signal_trap (226 samples, 0.22%)</title><rect x="55.6035%" y="37" width="0.2160%" height="15" fill="rgb(251,115,12)" fg:x="58169" fg:w="226"/><text x="55.8535%" y="47.50"></text></g><g><title>nn_from_scratch`crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (239 samples, 0.23%)</title><rect x="55.5977%" y="69" width="0.2285%" height="15" fill="rgb(240,54,50)" fg:x="58163" fg:w="239"/><text x="55.8477%" y="79.50"></text></g><g><title>nn_from_scratch`crossbeam_channel::channel::Sender&lt;T&gt;::send (247 samples, 0.24%)</title><rect x="55.5910%" y="85" width="0.2361%" height="15" fill="rgb(233,84,52)" fg:x="58156" fg:w="247"/><text x="55.8410%" y="95.50"></text></g><g><title>nn_from_scratch`matrixmultiply::dgemm_kernel::kernel_target_neon (5,131 samples, 4.90%)</title><rect x="55.8721%" y="53" width="4.9047%" height="15" fill="rgb(207,117,47)" fg:x="58450" fg:w="5131"/><text x="56.1221%" y="63.50">nn_fro..</text></g><g><title>nn_from_scratch`core::ops::function::impls::_&lt;impl core::ops::function::Fn&lt;A&gt; for &amp;F&gt;::call (5,253 samples, 5.02%)</title><rect x="55.8329%" y="69" width="5.0213%" height="15" fill="rgb(249,43,39)" fg:x="58409" fg:w="5253"/><text x="56.0829%" y="79.50">nn_fro..</text></g><g><title>nn_from_scratch`matrixmultiply::gemm::masked_kernel (81 samples, 0.08%)</title><rect x="60.7768%" y="53" width="0.0774%" height="15" fill="rgb(209,38,44)" fg:x="63581" fg:w="81"/><text x="61.0268%" y="63.50"></text></g><g><title>nn_from_scratch`core::ops::function::impls::_&lt;impl core::ops::function::Fn&lt;A&gt; for &amp;F&gt;::call (28,080 samples, 26.84%)</title><rect x="34.0222%" y="133" width="26.8415%" height="15" fill="rgb(236,212,23)" fg:x="35592" fg:w="28080"/><text x="34.2722%" y="143.50">nn_from_scratch`core::ops::function::impls:..</text></g><g><title>nn_from_scratch`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (27,550 samples, 26.33%)</title><rect x="34.5288%" y="117" width="26.3349%" height="15" fill="rgb(242,79,21)" fg:x="36122" fg:w="27550"/><text x="34.7788%" y="127.50">nn_from_scratch`matrixmultiply::threading:..</text></g><g><title>nn_from_scratch`thread_tree::ThreadTreeCtx::join (6,855 samples, 6.55%)</title><rect x="54.3111%" y="101" width="6.5527%" height="15" fill="rgb(211,96,35)" fg:x="56817" fg:w="6855"/><text x="54.5611%" y="111.50">nn_from_s..</text></g><g><title>nn_from_scratch`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each::inner (5,268 samples, 5.04%)</title><rect x="55.8281%" y="85" width="5.0357%" height="15" fill="rgb(253,215,40)" fg:x="58404" fg:w="5268"/><text x="56.0781%" y="95.50">nn_fro..</text></g><g><title>nn_from_scratch`&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize (46,011 samples, 43.98%)</title><rect x="16.8849%" y="213" width="43.9817%" height="15" fill="rgb(211,81,21)" fg:x="17664" fg:w="46011"/><text x="17.1349%" y="223.50">nn_from_scratch`&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize</text></g><g><title> 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize (46,011 samples, 43.98%)</title><rect x="16.8849%" y="197" width="43.9817%" height="15" fill="rgb(208,190,38)" fg:x="17664" fg:w="46011"/><text x="17.1349%" y="207.50"> 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray..</text></g><g><title> 2]&gt;&gt;&gt;&gt;::dot (46,011 samples, 43.98%)</title><rect x="16.8849%" y="181" width="43.9817%" height="15" fill="rgb(235,213,38)" fg:x="17664" fg:w="46011"/><text x="17.1349%" y="191.50"> 2]&gt;&gt;&gt;&gt;::dot</text></g><g><title>nn_from_scratch`ndarray::linalg::impl_linalg::mat_mul_impl (45,973 samples, 43.95%)</title><rect x="16.9213%" y="165" width="43.9454%" height="15" fill="rgb(237,122,38)" fg:x="17702" fg:w="45973"/><text x="17.1713%" y="175.50">nn_from_scratch`ndarray::linalg::impl_linalg::mat_mul_impl</text></g><g><title>nn_from_scratch`matrixmultiply::gemm::gemm_loop (45,960 samples, 43.93%)</title><rect x="16.9337%" y="149" width="43.9329%" height="15" fill="rgb(244,218,35)" fg:x="17715" fg:w="45960"/><text x="17.1837%" y="159.50">nn_from_scratch`matrixmultiply::gemm::gemm_loop</text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::into_dyn (16 samples, 0.02%)</title><rect x="60.8714%" y="213" width="0.0153%" height="15" fill="rgb(240,68,47)" fg:x="63680" fg:w="16"/><text x="61.1214%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (15 samples, 0.01%)</title><rect x="60.8962%" y="181" width="0.0143%" height="15" fill="rgb(210,16,53)" fg:x="63706" fg:w="15"/><text x="61.1462%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (13 samples, 0.01%)</title><rect x="60.8982%" y="165" width="0.0124%" height="15" fill="rgb(235,124,12)" fg:x="63708" fg:w="13"/><text x="61.1482%" y="175.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::to_owned (23 samples, 0.02%)</title><rect x="60.8943%" y="213" width="0.0220%" height="15" fill="rgb(224,169,11)" fg:x="63704" fg:w="23"/><text x="61.1443%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.02%)</title><rect x="60.8943%" y="197" width="0.0220%" height="15" fill="rgb(250,166,2)" fg:x="63704" fg:w="23"/><text x="61.1443%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (21 samples, 0.02%)</title><rect x="60.9679%" y="181" width="0.0201%" height="15" fill="rgb(242,216,29)" fg:x="63781" fg:w="21"/><text x="61.2179%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (20 samples, 0.02%)</title><rect x="60.9689%" y="165" width="0.0191%" height="15" fill="rgb(230,116,27)" fg:x="63782" fg:w="20"/><text x="61.2189%" y="175.50"></text></g><g><title>nn_from_scratch`&lt;nn_lib::layer::DenseLayer as nn_lib::layer::Layer&gt;::propagate_backward (62,956 samples, 60.18%)</title><rect x="0.8135%" y="229" width="60.1793%" height="15" fill="rgb(228,99,48)" fg:x="851" fg:w="62956"/><text x="1.0635%" y="239.50">nn_from_scratch`&lt;nn_lib::layer::DenseLayer as nn_lib::layer::Layer&gt;::propagate_backward</text></g><g><title>nn_from_scratch`ndarray::numeric::impl_numeric::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::sum_axis (78 samples, 0.07%)</title><rect x="60.9182%" y="213" width="0.0746%" height="15" fill="rgb(253,11,6)" fg:x="63729" fg:w="78"/><text x="61.1682%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (26 samples, 0.02%)</title><rect x="60.9679%" y="197" width="0.0249%" height="15" fill="rgb(247,143,39)" fg:x="63781" fg:w="26"/><text x="61.2179%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (918 samples, 0.88%)</title><rect x="61.0129%" y="213" width="0.8775%" height="15" fill="rgb(236,97,10)" fg:x="63828" fg:w="918"/><text x="61.2629%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (913 samples, 0.87%)</title><rect x="61.0176%" y="197" width="0.8727%" height="15" fill="rgb(233,208,19)" fg:x="63833" fg:w="913"/><text x="61.2676%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13,315 samples, 12.73%)</title><rect x="61.9114%" y="197" width="12.7277%" height="15" fill="rgb(216,164,2)" fg:x="64768" fg:w="13315"/><text x="62.1614%" y="207.50">libsystem_platform...</text></g><g><title>nn_from_scratch`&lt;nn_lib::layer::DenseLayer as nn_lib::layer::Trainable&gt;::get_gradients (13,354 samples, 12.77%)</title><rect x="61.9047%" y="213" width="12.7650%" height="15" fill="rgb(220,129,5)" fg:x="64761" fg:w="13354"/><text x="62.1547%" y="223.50">nn_from_scratch`&lt;nn..</text></g><g><title>nn_from_scratch`ndarray::impl_clone::_&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (29 samples, 0.03%)</title><rect x="74.6420%" y="197" width="0.0277%" height="15" fill="rgb(242,17,10)" fg:x="78086" fg:w="29"/><text x="74.8920%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (22 samples, 0.02%)</title><rect x="74.6487%" y="181" width="0.0210%" height="15" fill="rgb(242,107,0)" fg:x="78093" fg:w="22"/><text x="74.8987%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (19 samples, 0.02%)</title><rect x="74.6516%" y="165" width="0.0182%" height="15" fill="rgb(251,28,31)" fg:x="78096" fg:w="19"/><text x="74.9016%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (19 samples, 0.02%)</title><rect x="74.6516%" y="149" width="0.0182%" height="15" fill="rgb(233,223,10)" fg:x="78096" fg:w="19"/><text x="74.9016%" y="159.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::default_strides (34 samples, 0.03%)</title><rect x="82.2519%" y="181" width="0.0325%" height="15" fill="rgb(215,21,27)" fg:x="86047" fg:w="34"/><text x="82.5019%" y="191.50"></text></g><g><title>nn_from_scratch`&lt;nn_lib::optimizer::GradientDescent as nn_lib::optimizer::Optimizer&gt;::step (22,275 samples, 21.29%)</title><rect x="60.9937%" y="229" width="21.2926%" height="15" fill="rgb(232,23,21)" fg:x="63808" fg:w="22275"/><text x="61.2437%" y="239.50">nn_from_scratch`&lt;nn_lib::optimizer..</text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (7,961 samples, 7.61%)</title><rect x="74.6764%" y="213" width="7.6099%" height="15" fill="rgb(244,5,23)" fg:x="78122" fg:w="7961"/><text x="74.9264%" y="223.50">nn_from_sc..</text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::is_contiguous (41 samples, 0.04%)</title><rect x="82.2471%" y="197" width="0.0392%" height="15" fill="rgb(226,81,46)" fg:x="86042" fg:w="41"/><text x="82.4971%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Div&lt;B&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::div (4,849 samples, 4.64%)</title><rect x="82.2930%" y="229" width="4.6351%" height="15" fill="rgb(247,70,30)" fg:x="86090" fg:w="4849"/><text x="82.5430%" y="239.50">nn_fr..</text></g><g><title>nn_from_scratch`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::uninit (12 samples, 0.01%)</title><rect x="86.9406%" y="181" width="0.0115%" height="15" fill="rgb(212,68,19)" fg:x="90952" fg:w="12"/><text x="87.1906%" y="191.50"></text></g><g><title>nn_from_scratch`ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (30 samples, 0.03%)</title><rect x="86.9291%" y="229" width="0.0287%" height="15" fill="rgb(240,187,13)" fg:x="90940" fg:w="30"/><text x="87.1791%" y="239.50"></text></g><g><title>nn_from_scratch`ndarray::zip::Zip&lt;(P1,P2),D&gt;::map_collect_owned (22 samples, 0.02%)</title><rect x="86.9367%" y="213" width="0.0210%" height="15" fill="rgb(223,113,26)" fg:x="90948" fg:w="22"/><text x="87.1867%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::build_uninit (21 samples, 0.02%)</title><rect x="86.9377%" y="197" width="0.0201%" height="15" fill="rgb(206,192,2)" fg:x="90949" fg:w="21"/><text x="87.1877%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (14 samples, 0.01%)</title><rect x="87.0037%" y="213" width="0.0134%" height="15" fill="rgb(241,108,4)" fg:x="91018" fg:w="14"/><text x="87.2537%" y="223.50"></text></g><g><title>nn_from_scratch`nn_lib::cost::CostFunction::cost (62 samples, 0.06%)</title><rect x="86.9625%" y="229" width="0.0593%" height="15" fill="rgb(247,173,49)" fg:x="90975" fg:w="62"/><text x="87.2125%" y="239.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map_axis (80 samples, 0.08%)</title><rect x="87.0266%" y="213" width="0.0765%" height="15" fill="rgb(224,114,35)" fg:x="91042" fg:w="80"/><text x="87.2766%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::iterators::to_vec_mapped (62 samples, 0.06%)</title><rect x="87.0438%" y="197" width="0.0593%" height="15" fill="rgb(245,159,27)" fg:x="91060" fg:w="62"/><text x="87.2938%" y="207.50"></text></g><g><title>nn_from_scratch`nn_lib::metrics::Metrics::accumulate (86 samples, 0.08%)</title><rect x="87.0218%" y="229" width="0.0822%" height="15" fill="rgb(245,172,44)" fg:x="91037" fg:w="86"/><text x="87.2718%" y="239.50"></text></g><g><title>nn_from_scratch`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (120 samples, 0.11%)</title><rect x="87.1251%" y="149" width="0.1147%" height="15" fill="rgb(236,23,11)" fg:x="91145" fg:w="120"/><text x="87.3751%" y="159.50"></text></g><g><title>nn_from_scratch`nn_lib::neural_network::NeuralNetwork::create_batches (143 samples, 0.14%)</title><rect x="87.1040%" y="229" width="0.1367%" height="15" fill="rgb(205,117,38)" fg:x="91123" fg:w="143"/><text x="87.3540%" y="239.50"></text></g><g><title>nn_from_scratch`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (143 samples, 0.14%)</title><rect x="87.1040%" y="213" width="0.1367%" height="15" fill="rgb(237,72,25)" fg:x="91123" fg:w="143"/><text x="87.3540%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::select (143 samples, 0.14%)</title><rect x="87.1040%" y="197" width="0.1367%" height="15" fill="rgb(244,70,9)" fg:x="91123" fg:w="143"/><text x="87.3540%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::stacking::concatenate (141 samples, 0.13%)</title><rect x="87.1059%" y="181" width="0.1348%" height="15" fill="rgb(217,125,39)" fg:x="91125" fg:w="141"/><text x="87.3559%" y="191.50"></text></g><g><title>nn_from_scratch`ndarray::impl_owned_array::_&lt;impl ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;A&gt;,D&gt;&gt;::append (137 samples, 0.13%)</title><rect x="87.1098%" y="165" width="0.1310%" height="15" fill="rgb(235,36,10)" fg:x="91129" fg:w="137"/><text x="87.3598%" y="175.50"></text></g><g><title>nn_from_scratch`nn_lib::cost::CostFunction::cost (18 samples, 0.02%)</title><rect x="87.2522%" y="213" width="0.0172%" height="15" fill="rgb(251,123,47)" fg:x="91278" fg:w="18"/><text x="87.5022%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map_axis (20 samples, 0.02%)</title><rect x="87.2713%" y="197" width="0.0191%" height="15" fill="rgb(221,13,13)" fg:x="91298" fg:w="20"/><text x="87.5213%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::iterators::to_vec_mapped (17 samples, 0.02%)</title><rect x="87.2742%" y="181" width="0.0163%" height="15" fill="rgb(238,131,9)" fg:x="91301" fg:w="17"/><text x="87.5242%" y="191.50"></text></g><g><title>nn_from_scratch`nn_lib::metrics::Metrics::accumulate (23 samples, 0.02%)</title><rect x="87.2694%" y="213" width="0.0220%" height="15" fill="rgb(211,50,8)" fg:x="91296" fg:w="23"/><text x="87.5194%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (13 samples, 0.01%)</title><rect x="87.3048%" y="101" width="0.0124%" height="15" fill="rgb(245,182,24)" fg:x="91333" fg:w="13"/><text x="87.5548%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (14 samples, 0.01%)</title><rect x="87.3048%" y="133" width="0.0134%" height="15" fill="rgb(242,14,37)" fg:x="91333" fg:w="14"/><text x="87.5548%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (14 samples, 0.01%)</title><rect x="87.3048%" y="117" width="0.0134%" height="15" fill="rgb(246,228,12)" fg:x="91333" fg:w="14"/><text x="87.5548%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.01%)</title><rect x="87.3048%" y="149" width="0.0143%" height="15" fill="rgb(213,55,15)" fg:x="91333" fg:w="15"/><text x="87.5548%" y="159.50"></text></g><g><title>nn_from_scratch`ndarray::impl_owned_array::_&lt;impl ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;A&gt;,D&gt;&gt;::append (262 samples, 0.25%)</title><rect x="87.3325%" y="149" width="0.2504%" height="15" fill="rgb(209,9,3)" fg:x="91362" fg:w="262"/><text x="87.5825%" y="159.50"></text></g><g><title>nn_from_scratch`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (237 samples, 0.23%)</title><rect x="87.3564%" y="133" width="0.2265%" height="15" fill="rgb(230,59,30)" fg:x="91387" fg:w="237"/><text x="87.6064%" y="143.50"></text></g><g><title>nn_from_scratch`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (305 samples, 0.29%)</title><rect x="87.2942%" y="197" width="0.2915%" height="15" fill="rgb(209,121,21)" fg:x="91322" fg:w="305"/><text x="87.5442%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::select (304 samples, 0.29%)</title><rect x="87.2952%" y="181" width="0.2906%" height="15" fill="rgb(220,109,13)" fg:x="91323" fg:w="304"/><text x="87.5452%" y="191.50"></text></g><g><title>nn_from_scratch`ndarray::stacking::concatenate (297 samples, 0.28%)</title><rect x="87.3019%" y="165" width="0.2839%" height="15" fill="rgb(232,18,1)" fg:x="91330" fg:w="297"/><text x="87.5519%" y="175.50"></text></g><g><title>nn_from_scratch`nn_lib::neural_network::NeuralNetwork::create_batches (309 samples, 0.30%)</title><rect x="87.2914%" y="213" width="0.2954%" height="15" fill="rgb(215,41,42)" fg:x="91319" fg:w="309"/><text x="87.5414%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (11 samples, 0.01%)</title><rect x="87.5896%" y="197" width="0.0105%" height="15" fill="rgb(224,123,36)" fg:x="91631" fg:w="11"/><text x="87.8396%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (315 samples, 0.30%)</title><rect x="87.6040%" y="197" width="0.3011%" height="15" fill="rgb(240,125,3)" fg:x="91646" fg:w="315"/><text x="87.8540%" y="207.50"></text></g><g><title>libsystem_m.dylib`exp (11 samples, 0.01%)</title><rect x="87.9576%" y="149" width="0.0105%" height="15" fill="rgb(205,98,50)" fg:x="92016" fg:w="11"/><text x="88.2076%" y="159.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (43 samples, 0.04%)</title><rect x="87.9318%" y="165" width="0.0411%" height="15" fill="rgb(205,185,37)" fg:x="91989" fg:w="43"/><text x="88.1818%" y="175.50"></text></g><g><title>nn_from_scratch`nn_lib::activation::Activation::apply (103 samples, 0.10%)</title><rect x="87.9089%" y="181" width="0.0985%" height="15" fill="rgb(238,207,15)" fg:x="91965" fg:w="103"/><text x="88.1589%" y="191.50"></text></g><g><title>nn_from_scratch`nn_lib::activation::check_nan (29 samples, 0.03%)</title><rect x="87.9796%" y="165" width="0.0277%" height="15" fill="rgb(213,199,42)" fg:x="92039" fg:w="29"/><text x="88.2296%" y="175.50"></text></g><g><title>nn_from_scratch`&lt;nn_lib::layer::ActivationLayer as nn_lib::layer::Layer&gt;::feed_forward (108 samples, 0.10%)</title><rect x="87.9051%" y="197" width="0.1032%" height="15" fill="rgb(235,201,11)" fg:x="91961" fg:w="108"/><text x="88.1551%" y="207.50"></text></g><g><title>libBLAS.dylib`0x00000001995b9af8 (19 samples, 0.02%)</title><rect x="88.0245%" y="53" width="0.0182%" height="15" fill="rgb(207,46,11)" fg:x="92086" fg:w="19"/><text x="88.2745%" y="63.50"></text></g><g><title>libBLAS.dylib`0x00000001995ba5d0 (12 samples, 0.01%)</title><rect x="88.0427%" y="53" width="0.0115%" height="15" fill="rgb(241,35,35)" fg:x="92105" fg:w="12"/><text x="88.2927%" y="63.50"></text></g><g><title>libBLAS.dylib`0x00000001995b3548 (38 samples, 0.04%)</title><rect x="88.0245%" y="69" width="0.0363%" height="15" fill="rgb(243,32,47)" fg:x="92086" fg:w="38"/><text x="88.2745%" y="79.50"></text></g><g><title>libBLAS.dylib`0x0000000199644b84 (461 samples, 0.44%)</title><rect x="88.0628%" y="53" width="0.4407%" height="15" fill="rgb(247,202,23)" fg:x="92126" fg:w="461"/><text x="88.3128%" y="63.50"></text></g><g><title>libBLAS.dylib`0x000000019962ebd4 (466 samples, 0.45%)</title><rect x="88.0609%" y="69" width="0.4454%" height="15" fill="rgb(219,102,11)" fg:x="92124" fg:w="466"/><text x="88.3109%" y="79.50"></text></g><g><title>libBLAS.dylib`0x000000019956fb78 (508 samples, 0.49%)</title><rect x="88.0245%" y="85" width="0.4856%" height="15" fill="rgb(243,110,44)" fg:x="92086" fg:w="508"/><text x="88.2745%" y="95.50"></text></g><g><title>libBLAS.dylib`0x0000000199664fd8 (25 samples, 0.02%)</title><rect x="88.5101%" y="85" width="0.0239%" height="15" fill="rgb(222,74,54)" fg:x="92594" fg:w="25"/><text x="88.7601%" y="95.50"></text></g><g><title>libBLAS.dylib`0x0000000199666e24 (545 samples, 0.52%)</title><rect x="88.0245%" y="101" width="0.5210%" height="15" fill="rgb(216,99,12)" fg:x="92086" fg:w="545"/><text x="88.2745%" y="111.50"></text></g><g><title>nn_from_scratch`&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize (557 samples, 0.53%)</title><rect x="88.0217%" y="181" width="0.5324%" height="15" fill="rgb(226,22,26)" fg:x="92083" fg:w="557"/><text x="88.2717%" y="191.50"></text></g><g><title> 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize (557 samples, 0.53%)</title><rect x="88.0217%" y="165" width="0.5324%" height="15" fill="rgb(217,163,10)" fg:x="92083" fg:w="557"/><text x="88.2717%" y="175.50"></text></g><g><title> 2]&gt;&gt;&gt;&gt;::dot (557 samples, 0.53%)</title><rect x="88.0217%" y="149" width="0.5324%" height="15" fill="rgb(213,25,53)" fg:x="92083" fg:w="557"/><text x="88.2717%" y="159.50"></text></g><g><title>nn_from_scratch`ndarray::linalg::impl_linalg::mat_mul_impl (555 samples, 0.53%)</title><rect x="88.0236%" y="133" width="0.5305%" height="15" fill="rgb(252,105,26)" fg:x="92085" fg:w="555"/><text x="88.2736%" y="143.50"></text></g><g><title>libBLAS.dylib`cblas_dgemm (554 samples, 0.53%)</title><rect x="88.0245%" y="117" width="0.5296%" height="15" fill="rgb(220,39,43)" fg:x="92086" fg:w="554"/><text x="88.2745%" y="127.50"></text></g><g><title>nn_from_scratch`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (18 samples, 0.02%)</title><rect x="88.5771%" y="149" width="0.0172%" height="15" fill="rgb(229,68,48)" fg:x="92664" fg:w="18"/><text x="88.8271%" y="159.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (35 samples, 0.03%)</title><rect x="88.5646%" y="165" width="0.0335%" height="15" fill="rgb(252,8,32)" fg:x="92651" fg:w="35"/><text x="88.8146%" y="175.50"></text></g><g><title>nn_from_scratch`&lt;nn_lib::layer::DenseLayer as nn_lib::layer::Layer&gt;::feed_forward (618 samples, 0.59%)</title><rect x="88.0083%" y="197" width="0.5907%" height="15" fill="rgb(223,20,43)" fg:x="92069" fg:w="618"/><text x="88.2583%" y="207.50"></text></g><g><title>nn_from_scratch`ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (37 samples, 0.04%)</title><rect x="88.5637%" y="181" width="0.0354%" height="15" fill="rgb(229,81,49)" fg:x="92650" fg:w="37"/><text x="88.8137%" y="191.50"></text></g><g><title>nn_from_scratch`nn_lib::neural_network::NeuralNetwork::evaluate (1,428 samples, 1.37%)</title><rect x="87.2407%" y="229" width="1.3650%" height="15" fill="rgb(236,28,36)" fg:x="91266" fg:w="1428"/><text x="87.4907%" y="239.50"></text></g><g><title>nn_from_scratch`nn_lib::neural_network::NeuralNetwork::predict (1,066 samples, 1.02%)</title><rect x="87.5867%" y="213" width="1.0190%" height="15" fill="rgb(249,185,26)" fg:x="91628" fg:w="1066"/><text x="87.8367%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (18 samples, 0.02%)</title><rect x="88.6248%" y="213" width="0.0172%" height="15" fill="rgb(249,174,33)" fg:x="92714" fg:w="18"/><text x="88.8748%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (353 samples, 0.34%)</title><rect x="88.6487%" y="213" width="0.3374%" height="15" fill="rgb(233,201,37)" fg:x="92739" fg:w="353"/><text x="88.8987%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (47 samples, 0.04%)</title><rect x="89.0110%" y="197" width="0.0449%" height="15" fill="rgb(221,78,26)" fg:x="93118" fg:w="47"/><text x="89.2610%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (12 samples, 0.01%)</title><rect x="89.0655%" y="165" width="0.0115%" height="15" fill="rgb(250,127,30)" fg:x="93175" fg:w="12"/><text x="89.3155%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.02%)</title><rect x="89.0646%" y="181" width="0.0163%" height="15" fill="rgb(230,49,44)" fg:x="93174" fg:w="17"/><text x="89.3146%" y="191.50"></text></g><g><title>nn_from_scratch`ndarray::impl_clone::_&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (19 samples, 0.02%)</title><rect x="89.0636%" y="197" width="0.0182%" height="15" fill="rgb(229,67,23)" fg:x="93173" fg:w="19"/><text x="89.3136%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 0.01%)</title><rect x="89.0999%" y="181" width="0.0115%" height="15" fill="rgb(249,83,47)" fg:x="93211" fg:w="12"/><text x="89.3499%" y="191.50"></text></g><g><title>libsystem_m.dylib`exp (35 samples, 0.03%)</title><rect x="89.1955%" y="165" width="0.0335%" height="15" fill="rgb(215,43,3)" fg:x="93311" fg:w="35"/><text x="89.4455%" y="175.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::default_strides (11 samples, 0.01%)</title><rect x="89.2309%" y="149" width="0.0105%" height="15" fill="rgb(238,154,13)" fg:x="93348" fg:w="11"/><text x="89.4809%" y="159.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (95 samples, 0.09%)</title><rect x="89.1515%" y="181" width="0.0908%" height="15" fill="rgb(219,56,2)" fg:x="93265" fg:w="95"/><text x="89.4015%" y="191.50"></text></g><g><title>nn_from_scratch`ndarray::dimension::dimension_trait::Dimension::is_contiguous (12 samples, 0.01%)</title><rect x="89.2309%" y="165" width="0.0115%" height="15" fill="rgb(233,0,4)" fg:x="93348" fg:w="12"/><text x="89.4809%" y="175.50"></text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (18 samples, 0.02%)</title><rect x="89.2471%" y="181" width="0.0172%" height="15" fill="rgb(235,30,7)" fg:x="93365" fg:w="18"/><text x="89.4971%" y="191.50"></text></g><g><title>nn_from_scratch`&lt;nn_lib::layer::ActivationLayer as nn_lib::layer::Layer&gt;::feed_forward_save (406 samples, 0.39%)</title><rect x="88.9881%" y="213" width="0.3881%" height="15" fill="rgb(250,79,13)" fg:x="93094" fg:w="406"/><text x="89.2381%" y="223.50"></text></g><g><title>nn_from_scratch`nn_lib::activation::Activation::apply (304 samples, 0.29%)</title><rect x="89.0856%" y="197" width="0.2906%" height="15" fill="rgb(211,146,34)" fg:x="93196" fg:w="304"/><text x="89.3356%" y="207.50"></text></g><g><title>nn_from_scratch`nn_lib::activation::check_nan (116 samples, 0.11%)</title><rect x="89.2653%" y="181" width="0.1109%" height="15" fill="rgb(228,22,38)" fg:x="93384" fg:w="116"/><text x="89.5153%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (20 samples, 0.02%)</title><rect x="89.3877%" y="149" width="0.0191%" height="15" fill="rgb(235,168,5)" fg:x="93512" fg:w="20"/><text x="89.6377%" y="159.50"></text></g><g><title>libBLAS.dylib`0x0000000199574f8c (11 samples, 0.01%)</title><rect x="89.4154%" y="85" width="0.0105%" height="15" fill="rgb(221,155,16)" fg:x="93541" fg:w="11"/><text x="89.6654%" y="95.50"></text></g><g><title>libBLAS.dylib`0x00000001995b9af8 (184 samples, 0.18%)</title><rect x="89.4268%" y="69" width="0.1759%" height="15" fill="rgb(215,215,53)" fg:x="93553" fg:w="184"/><text x="89.6768%" y="79.50"></text></g><g><title>libBLAS.dylib`0x00000001995ba5d0 (27 samples, 0.03%)</title><rect x="89.6027%" y="69" width="0.0258%" height="15" fill="rgb(223,4,10)" fg:x="93737" fg:w="27"/><text x="89.8527%" y="79.50"></text></g><g><title>libBLAS.dylib`0x00000001995b3548 (233 samples, 0.22%)</title><rect x="89.4259%" y="85" width="0.2227%" height="15" fill="rgb(234,103,6)" fg:x="93552" fg:w="233"/><text x="89.6759%" y="95.50"></text></g><g><title>libBLAS.dylib`0x00000001997fb16c (21 samples, 0.02%)</title><rect x="89.6285%" y="69" width="0.0201%" height="15" fill="rgb(227,97,0)" fg:x="93764" fg:w="21"/><text x="89.8785%" y="79.50"></text></g><g><title>libBLAS.dylib`0x0000000199644b84 (1,882 samples, 1.80%)</title><rect x="89.6543%" y="69" width="1.7990%" height="15" fill="rgb(234,150,53)" fg:x="93791" fg:w="1882"/><text x="89.9043%" y="79.50">l..</text></g><g><title>libBLAS.dylib`0x000000019962ebd4 (1,904 samples, 1.82%)</title><rect x="89.6486%" y="85" width="1.8200%" height="15" fill="rgb(228,201,54)" fg:x="93785" fg:w="1904"/><text x="89.8986%" y="95.50">l..</text></g><g><title>libsystem_kernel.dylib`madvise (1,382 samples, 1.32%)</title><rect x="91.4820%" y="69" width="1.3210%" height="15" fill="rgb(222,22,37)" fg:x="95703" fg:w="1382"/><text x="91.7320%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1,392 samples, 1.33%)</title><rect x="91.4782%" y="85" width="1.3306%" height="15" fill="rgb(237,53,32)" fg:x="95699" fg:w="1392"/><text x="91.7282%" y="95.50"></text></g><g><title>libBLAS.dylib`0x000000019956fb78 (3,554 samples, 3.40%)</title><rect x="89.4154%" y="101" width="3.3973%" height="15" fill="rgb(233,25,53)" fg:x="93541" fg:w="3554"/><text x="89.6654%" y="111.50">lib..</text></g><g><title>libBLAS.dylib`0x0000000199738ae0 (18 samples, 0.02%)</title><rect x="92.8164%" y="85" width="0.0172%" height="15" fill="rgb(210,40,34)" fg:x="97099" fg:w="18"/><text x="93.0664%" y="95.50"></text></g><g><title>libBLAS.dylib`0x000000019976e030 (18 samples, 0.02%)</title><rect x="92.8164%" y="69" width="0.0172%" height="15" fill="rgb(241,220,44)" fg:x="97099" fg:w="18"/><text x="93.0664%" y="79.50"></text></g><g><title>libBLAS.dylib`0x00000001997f0e28 (19 samples, 0.02%)</title><rect x="92.8346%" y="85" width="0.0182%" height="15" fill="rgb(235,28,35)" fg:x="97118" fg:w="19"/><text x="93.0846%" y="95.50"></text></g><g><title>libBLAS.dylib`0x0000000199664fd8 (55 samples, 0.05%)</title><rect x="92.8145%" y="101" width="0.0526%" height="15" fill="rgb(210,56,17)" fg:x="97097" fg:w="55"/><text x="93.0645%" y="111.50"></text></g><g><title>libBLAS.dylib`0x0000000199666e24 (3,643 samples, 3.48%)</title><rect x="89.4154%" y="117" width="3.4823%" height="15" fill="rgb(224,130,29)" fg:x="93541" fg:w="3643"/><text x="89.6654%" y="127.50">lib..</text></g><g><title>libsystem_malloc.dylib`free_small (14 samples, 0.01%)</title><rect x="92.8843%" y="101" width="0.0134%" height="15" fill="rgb(235,212,8)" fg:x="97170" fg:w="14"/><text x="93.1343%" y="111.50"></text></g><g><title>libBLAS.dylib`BLASStateRelease (16 samples, 0.02%)</title><rect x="92.9006%" y="117" width="0.0153%" height="15" fill="rgb(223,33,50)" fg:x="97187" fg:w="16"/><text x="93.1506%" y="127.50"></text></g><g><title>nn_from_scratch`&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize (3,694 samples, 3.53%)</title><rect x="89.3857%" y="197" width="3.5311%" height="15" fill="rgb(219,149,13)" fg:x="93510" fg:w="3694"/><text x="89.6357%" y="207.50">nn_..</text></g><g><title> 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize (3,694 samples, 3.53%)</title><rect x="89.3857%" y="181" width="3.5311%" height="15" fill="rgb(250,156,29)" fg:x="93510" fg:w="3694"/><text x="89.6357%" y="191.50"> 2]..</text></g><g><title> 2]&gt;&gt;&gt;&gt;::dot (3,694 samples, 3.53%)</title><rect x="89.3857%" y="165" width="3.5311%" height="15" fill="rgb(216,193,19)" fg:x="93510" fg:w="3694"/><text x="89.6357%" y="175.50"> 2]..</text></g><g><title>nn_from_scratch`ndarray::linalg::impl_linalg::mat_mul_impl (3,672 samples, 3.51%)</title><rect x="89.4068%" y="149" width="3.5100%" height="15" fill="rgb(216,135,14)" fg:x="93532" fg:w="3672"/><text x="89.6568%" y="159.50">nn_..</text></g><g><title>libBLAS.dylib`cblas_dgemm (3,668 samples, 3.51%)</title><rect x="89.4106%" y="133" width="3.5062%" height="15" fill="rgb(241,47,5)" fg:x="93536" fg:w="3668"/><text x="89.6606%" y="143.50">lib..</text></g><g><title>nn_from_scratch`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (115 samples, 0.11%)</title><rect x="92.9522%" y="181" width="0.1099%" height="15" fill="rgb(233,42,35)" fg:x="97241" fg:w="115"/><text x="93.2022%" y="191.50"></text></g><g><title>nn_from_scratch`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (68 samples, 0.07%)</title><rect x="92.9971%" y="165" width="0.0650%" height="15" fill="rgb(231,13,6)" fg:x="97288" fg:w="68"/><text x="93.2471%" y="175.50"></text></g><g><title>nn_from_scratch`&lt;nn_lib::layer::DenseLayer as nn_lib::layer::Layer&gt;::feed_forward (3,859 samples, 3.69%)</title><rect x="89.3762%" y="213" width="3.6888%" height="15" fill="rgb(207,181,40)" fg:x="93500" fg:w="3859"/><text x="89.6262%" y="223.50">nn_f..</text></g><g><title>nn_from_scratch`ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (145 samples, 0.14%)</title><rect x="92.9264%" y="197" width="0.1386%" height="15" fill="rgb(254,173,49)" fg:x="97214" fg:w="145"/><text x="93.1764%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (136 samples, 0.13%)</title><rect x="93.0755%" y="197" width="0.1300%" height="15" fill="rgb(221,1,38)" fg:x="97370" fg:w="136"/><text x="93.3255%" y="207.50"></text></g><g><title>nn_from_scratch`&lt;nn_lib::layer::DenseLayer as nn_lib::layer::Layer&gt;::feed_forward_save (159 samples, 0.15%)</title><rect x="93.0650%" y="213" width="0.1520%" height="15" fill="rgb(206,124,46)" fg:x="97359" fg:w="159"/><text x="93.3150%" y="223.50"></text></g><g><title>nn_from_scratch`ndarray::impl_clone::_&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (11 samples, 0.01%)</title><rect x="93.2065%" y="197" width="0.0105%" height="15" fill="rgb(249,21,11)" fg:x="97507" fg:w="11"/><text x="93.4565%" y="207.50"></text></g><g><title>dyld`start (97,523 samples, 93.22%)</title><rect x="0.0000%" y="357" width="93.2217%" height="15" fill="rgb(222,201,40)" fg:x="0" fg:w="97523"/><text x="0.2500%" y="367.50">dyld`start</text></g><g><title>nn_from_scratch`main (97,522 samples, 93.22%)</title><rect x="0.0010%" y="341" width="93.2208%" height="15" fill="rgb(235,61,29)" fg:x="1" fg:w="97522"/><text x="0.2510%" y="351.50">nn_from_scratch`main</text></g><g><title>nn_from_scratch`std::rt::lang_start_internal (97,522 samples, 93.22%)</title><rect x="0.0010%" y="325" width="93.2208%" height="15" fill="rgb(219,207,3)" fg:x="1" fg:w="97522"/><text x="0.2510%" y="335.50">nn_from_scratch`std::rt::lang_start_internal</text></g><g><title>nn_from_scratch`std::rt::lang_start::_{{closure}} (97,521 samples, 93.22%)</title><rect x="0.0019%" y="309" width="93.2198%" height="15" fill="rgb(222,56,46)" fg:x="2" fg:w="97521"/><text x="0.2519%" y="319.50">nn_from_scratch`std::rt::lang_start::_{{closure}}</text></g><g><title>nn_from_scratch`std::sys_common::backtrace::__rust_begin_short_backtrace (97,521 samples, 93.22%)</title><rect x="0.0019%" y="293" width="93.2198%" height="15" fill="rgb(239,76,54)" fg:x="2" fg:w="97521"/><text x="0.2519%" y="303.50">nn_from_scratch`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>nn_from_scratch`nn_from_scratch::main (97,521 samples, 93.22%)</title><rect x="0.0019%" y="277" width="93.2198%" height="15" fill="rgb(231,124,27)" fg:x="2" fg:w="97521"/><text x="0.2519%" y="287.50">nn_from_scratch`nn_from_scratch::main</text></g><g><title>nn_from_scratch`mnist::network::start (97,520 samples, 93.22%)</title><rect x="0.0029%" y="261" width="93.2189%" height="15" fill="rgb(249,195,6)" fg:x="3" fg:w="97520"/><text x="0.2529%" y="271.50">nn_from_scratch`mnist::network::start</text></g><g><title>nn_from_scratch`nn_lib::neural_network::NeuralNetwork::train (97,047 samples, 92.77%)</title><rect x="0.4550%" y="245" width="92.7667%" height="15" fill="rgb(237,174,47)" fg:x="476" fg:w="97047"/><text x="0.7050%" y="255.50">nn_from_scratch`nn_lib::neural_network::NeuralNetwork::train</text></g><g><title>nn_from_scratch`nn_lib::neural_network::NeuralNetwork::feed_forward (4,829 samples, 4.62%)</title><rect x="88.6057%" y="229" width="4.6160%" height="15" fill="rgb(206,201,31)" fg:x="92694" fg:w="4829"/><text x="88.8557%" y="239.50">nn_fr..</text></g><g><title>nn_from_scratch`crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (419 samples, 0.40%)</title><rect x="93.2418%" y="261" width="0.4005%" height="15" fill="rgb(231,57,52)" fg:x="97544" fg:w="419"/><text x="93.4918%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (213 samples, 0.20%)</title><rect x="93.6462%" y="245" width="0.2036%" height="15" fill="rgb(248,177,22)" fg:x="97967" fg:w="213"/><text x="93.8962%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (191 samples, 0.18%)</title><rect x="94.4042%" y="229" width="0.1826%" height="15" fill="rgb(215,211,37)" fg:x="98760" fg:w="191"/><text x="94.6542%" y="239.50"></text></g><g><title>libdispatch.dylib`_dispatch_semaphore_wait_slow (317 samples, 0.30%)</title><rect x="94.6011%" y="213" width="0.3030%" height="15" fill="rgb(241,128,51)" fg:x="98966" fg:w="317"/><text x="94.8511%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`semaphore_wait_trap (311 samples, 0.30%)</title><rect x="94.6068%" y="197" width="0.2973%" height="15" fill="rgb(227,165,31)" fg:x="98972" fg:w="311"/><text x="94.8568%" y="207.50"></text></g><g><title>nn_from_scratch`crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (1,319 samples, 1.26%)</title><rect x="93.6462%" y="261" width="1.2608%" height="15" fill="rgb(228,167,24)" fg:x="97967" fg:w="1319"/><text x="93.8962%" y="271.50"></text></g><g><title>nn_from_scratch`crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv::_{{closure}} (1,100 samples, 1.05%)</title><rect x="93.8555%" y="245" width="1.0515%" height="15" fill="rgb(228,143,12)" fg:x="98186" fg:w="1100"/><text x="94.1055%" y="255.50"></text></g><g><title>nn_from_scratch`std::thread::park (327 samples, 0.31%)</title><rect x="94.5944%" y="229" width="0.3126%" height="15" fill="rgb(249,149,8)" fg:x="98959" fg:w="327"/><text x="94.8444%" y="239.50"></text></g><g><title>nn_from_scratch`&lt;crossbeam_channel::channel::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,752 samples, 1.67%)</title><rect x="93.2342%" y="277" width="1.6747%" height="15" fill="rgb(243,35,44)" fg:x="97536" fg:w="1752"/><text x="93.4842%" y="287.50"></text></g><g><title>nn_from_scratch`core::ops::function::impls::_&lt;impl core::ops::function::Fn&lt;A&gt; for &amp;F&gt;::call (16 samples, 0.02%)</title><rect x="94.9099%" y="261" width="0.0153%" height="15" fill="rgb(246,89,9)" fg:x="99289" fg:w="16"/><text x="95.1599%" y="271.50"></text></g><g><title>nn_from_scratch`matrixmultiply::dgemm_kernel::kernel_target_neon (5,179 samples, 4.95%)</title><rect x="94.9634%" y="229" width="4.9506%" height="15" fill="rgb(233,213,13)" fg:x="99345" fg:w="5179"/><text x="95.2134%" y="239.50">nn_fro..</text></g><g><title>nn_from_scratch`core::ops::function::impls::_&lt;impl core::ops::function::Fn&lt;A&gt; for &amp;F&gt;::call (5,292 samples, 5.06%)</title><rect x="94.9261%" y="245" width="5.0586%" height="15" fill="rgb(233,141,41)" fg:x="99306" fg:w="5292"/><text x="95.1761%" y="255.50">nn_fro..</text></g><g><title>nn_from_scratch`matrixmultiply::gemm::masked_kernel (74 samples, 0.07%)</title><rect x="99.9140%" y="229" width="0.0707%" height="15" fill="rgb(239,167,4)" fg:x="104524" fg:w="74"/><text x="100.1640%" y="239.50"></text></g><g><title>nn_from_scratch`&lt;thread_tree::job::StackJob&lt;F,R&gt; as thread_tree::job::Job&gt;::execute (5,325 samples, 5.09%)</title><rect x="94.9089%" y="277" width="5.0901%" height="15" fill="rgb(209,217,16)" fg:x="99288" fg:w="5325"/><text x="95.1589%" y="287.50">nn_fro..</text></g><g><title>nn_from_scratch`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each::inner (5,308 samples, 5.07%)</title><rect x="94.9252%" y="261" width="5.0739%" height="15" fill="rgb(219,88,35)" fg:x="99305" fg:w="5308"/><text x="95.1752%" y="271.50">nn_fro..</text></g><g><title>nn_from_scratch`matrixmultiply::gemm::masked_kernel (15 samples, 0.01%)</title><rect x="99.9847%" y="245" width="0.0143%" height="15" fill="rgb(220,193,23)" fg:x="104598" fg:w="15"/><text x="100.2347%" y="255.50"></text></g><g><title>all (104,614 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(230,90,52)" fg:x="0" fg:w="104614"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (7,081 samples, 6.77%)</title><rect x="93.2313%" y="357" width="6.7687%" height="15" fill="rgb(252,106,19)" fg:x="97533" fg:w="7081"/><text x="93.4813%" y="367.50">libsystem..</text></g><g><title>libsystem_pthread.dylib`_pthread_start (7,081 samples, 6.77%)</title><rect x="93.2313%" y="341" width="6.7687%" height="15" fill="rgb(206,74,20)" fg:x="97533" fg:w="7081"/><text x="93.4813%" y="351.50">libsystem..</text></g><g><title>nn_from_scratch`std::sys::pal::unix::thread::Thread::new::thread_start (7,081 samples, 6.77%)</title><rect x="93.2313%" y="325" width="6.7687%" height="15" fill="rgb(230,138,44)" fg:x="97533" fg:w="7081"/><text x="93.4813%" y="335.50">nn_from_s..</text></g><g><title>nn_from_scratch`core::ops::function::FnOnce::call_once{{vtable.shim}} (7,081 samples, 6.77%)</title><rect x="93.2313%" y="309" width="6.7687%" height="15" fill="rgb(235,182,43)" fg:x="97533" fg:w="7081"/><text x="93.4813%" y="319.50">nn_from_s..</text></g><g><title>nn_from_scratch`std::sys_common::backtrace::__rust_begin_short_backtrace (7,080 samples, 6.77%)</title><rect x="93.2323%" y="293" width="6.7677%" height="15" fill="rgb(242,16,51)" fg:x="97534" fg:w="7080"/><text x="93.4823%" y="303.50">nn_from_s..</text></g></svg></svg>